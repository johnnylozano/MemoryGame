
MemoryGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004740  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a5c  08004a5c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004a5c  08004a5c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a5c  08004a5c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000078  08004adc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004adc  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5a1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5a  00000000  00000000  0002d649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  000300a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027027  00000000  00000000  00030bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4dc  00000000  00000000  00057bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efbff  00000000  00000000  000650b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154cb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a40  00000000  00000000  00154d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048b8 	.word	0x080048b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080048b8 	.word	0x080048b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 030c 	add.w	r3, r7, #12
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000286:	4b29      	ldr	r3, [pc, #164]	; (800032c <MX_GPIO_Init+0xbc>)
 8000288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028a:	4a28      	ldr	r2, [pc, #160]	; (800032c <MX_GPIO_Init+0xbc>)
 800028c:	f043 0304 	orr.w	r3, r3, #4
 8000290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000292:	4b26      	ldr	r3, [pc, #152]	; (800032c <MX_GPIO_Init+0xbc>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	f003 0304 	and.w	r3, r3, #4
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800029e:	4b23      	ldr	r3, [pc, #140]	; (800032c <MX_GPIO_Init+0xbc>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	4a22      	ldr	r2, [pc, #136]	; (800032c <MX_GPIO_Init+0xbc>)
 80002a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002aa:	4b20      	ldr	r3, [pc, #128]	; (800032c <MX_GPIO_Init+0xbc>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <MX_GPIO_Init+0xbc>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	4a1c      	ldr	r2, [pc, #112]	; (800032c <MX_GPIO_Init+0xbc>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_GPIO_Init+0xbc>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	603b      	str	r3, [r7, #0]
 80002cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2120      	movs	r1, #32
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d6:	f001 fc1b 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002e0:	4b13      	ldr	r3, [pc, #76]	; (8000330 <MX_GPIO_Init+0xc0>)
 80002e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002e8:	f107 030c 	add.w	r3, r7, #12
 80002ec:	4619      	mov	r1, r3
 80002ee:	4811      	ldr	r0, [pc, #68]	; (8000334 <MX_GPIO_Init+0xc4>)
 80002f0:	f001 fa4c 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80002f4:	2320      	movs	r3, #32
 80002f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2300      	movs	r3, #0
 8000302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	4619      	mov	r1, r3
 800030a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030e:	f001 fa3d 	bl	800178c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	2102      	movs	r1, #2
 8000316:	2028      	movs	r0, #40	; 0x28
 8000318:	f001 fa01 	bl	800171e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800031c:	2028      	movs	r0, #40	; 0x28
 800031e:	f001 fa1a 	bl	8001756 <HAL_NVIC_EnableIRQ>

}
 8000322:	bf00      	nop
 8000324:	3720      	adds	r7, #32
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	10210000 	.word	0x10210000
 8000334:	48000800 	.word	0x48000800

08000338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033e:	f001 f87a 	bl	8001436 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000342:	f000 fda5 	bl	8000e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000346:	f7ff ff93 	bl	8000270 <MX_GPIO_Init>
  MX_TIM2_Init();
 800034a:	f000 ff83 	bl	8001254 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);		//clock initialization
 800034e:	2100      	movs	r1, #0
 8000350:	48a3      	ldr	r0, [pc, #652]	; (80005e0 <main+0x2a8>)
 8000352:	f002 fae9 	bl	8002928 <HAL_TIM_PWM_Start>
  htim2.Instance -> CCR1 = 150;					//sets motor angle to 0 degrees
 8000356:	4ba2      	ldr	r3, [pc, #648]	; (80005e0 <main+0x2a8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2296      	movs	r2, #150	; 0x96
 800035c:	635a      	str	r2, [r3, #52]	; 0x34
	 	    * light up whenever the computer is moving, and and the motor arm will point
	 	    * towards the player and LED will cut off indicating the computer's turn
	 	    * is over.
	 	    ******************************************************************************
	 	    */
	 	  HAL_Delay(1000);
 800035e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000362:	f001 f8dd 	bl	8001520 <HAL_Delay>
	 	  if (start == 1)
 8000366:	4b9f      	ldr	r3, [pc, #636]	; (80005e4 <main+0x2ac>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b01      	cmp	r3, #1
 800036c:	f040 816a 	bne.w	8000644 <main+0x30c>
	 		  /**
	 		    ******************************************************************************
	 		    * Array Randomizer for computer
	 		    ******************************************************************************
	 		    */
	 		  for (int i=0; i<5; i++)
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
 8000374:	e025      	b.n	80003c2 <main+0x8a>
	 		  {
	 			  comp_array[i] = (rand() % 5) + 1;				//fills array with number 1-5
 8000376:	f003 fa9d 	bl	80038b4 <rand>
 800037a:	4601      	mov	r1, r0
 800037c:	4b9a      	ldr	r3, [pc, #616]	; (80005e8 <main+0x2b0>)
 800037e:	fb83 2301 	smull	r2, r3, r3, r1
 8000382:	105a      	asrs	r2, r3, #1
 8000384:	17cb      	asrs	r3, r1, #31
 8000386:	1ad2      	subs	r2, r2, r3
 8000388:	4613      	mov	r3, r2
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	4413      	add	r3, r2
 800038e:	1aca      	subs	r2, r1, r3
 8000390:	3201      	adds	r2, #1
 8000392:	4996      	ldr	r1, [pc, #600]	; (80005ec <main+0x2b4>)
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	 			  if (i > 0)
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	2b00      	cmp	r3, #0
 800039e:	dd0d      	ble.n	80003bc <main+0x84>
	 			  {
	 				  if (comp_array[i] == comp_array[i-1])		//checks if adjacent value is the same
 80003a0:	4a92      	ldr	r2, [pc, #584]	; (80005ec <main+0x2b4>)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	498f      	ldr	r1, [pc, #572]	; (80005ec <main+0x2b4>)
 80003ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d102      	bne.n	80003bc <main+0x84>
	 				  {
	 					  i--;									//if they're the same, redo the randomization
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
	 		  for (int i=0; i<5; i++)
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	3301      	adds	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	2b04      	cmp	r3, #4
 80003c6:	ddd6      	ble.n	8000376 <main+0x3e>
	 		    * 	motor sequence. LED light will be on while computer is moving.
	 		    * 	Motor will reset and LED light will turn off indicating it is the
	 		    * 	end of the computer's turn.
	 		    ******************************************************************************
	 		    */
	 		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2120      	movs	r1, #32
 80003cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d0:	f001 fb9e 	bl	8001b10 <HAL_GPIO_WritePin>
	 		  HAL_Delay(100);
 80003d4:	2064      	movs	r0, #100	; 0x64
 80003d6:	f001 f8a3 	bl	8001520 <HAL_Delay>
	 		  for (int i=0; i<5; i++)
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]
 80003de:	e04d      	b.n	800047c <main+0x144>
	 		  {
	 		  	  if (comp_array[i] == 1) {						//checks stored computer array values
 80003e0:	4a82      	ldr	r2, [pc, #520]	; (80005ec <main+0x2b4>)
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d104      	bne.n	80003f6 <main+0xbe>
	 		  		  htim2.Instance -> CCR1 = 130;				//affects motor
 80003ec:	4b7c      	ldr	r3, [pc, #496]	; (80005e0 <main+0x2a8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2282      	movs	r2, #130	; 0x82
 80003f2:	635a      	str	r2, [r3, #52]	; 0x34
 80003f4:	e03b      	b.n	800046e <main+0x136>
	 		  	  }
	 		  	  else if (comp_array[i] == 2) {
 80003f6:	4a7d      	ldr	r2, [pc, #500]	; (80005ec <main+0x2b4>)
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003fe:	2b02      	cmp	r3, #2
 8000400:	d104      	bne.n	800040c <main+0xd4>
	 		  	  		  htim2.Instance -> CCR1 = 110;
 8000402:	4b77      	ldr	r3, [pc, #476]	; (80005e0 <main+0x2a8>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	226e      	movs	r2, #110	; 0x6e
 8000408:	635a      	str	r2, [r3, #52]	; 0x34
 800040a:	e030      	b.n	800046e <main+0x136>
	 		  	  	  }
	 		  	  else if (comp_array[i] == 3) {
 800040c:	4a77      	ldr	r2, [pc, #476]	; (80005ec <main+0x2b4>)
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000414:	2b03      	cmp	r3, #3
 8000416:	d104      	bne.n	8000422 <main+0xea>
	 		  	  		  htim2.Instance -> CCR1 = 90;
 8000418:	4b71      	ldr	r3, [pc, #452]	; (80005e0 <main+0x2a8>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	225a      	movs	r2, #90	; 0x5a
 800041e:	635a      	str	r2, [r3, #52]	; 0x34
 8000420:	e025      	b.n	800046e <main+0x136>
	 		  	  	  }
	 		  	  else if (comp_array[i] == 4) {
 8000422:	4a72      	ldr	r2, [pc, #456]	; (80005ec <main+0x2b4>)
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800042a:	2b04      	cmp	r3, #4
 800042c:	d104      	bne.n	8000438 <main+0x100>
	 		  	  		  htim2.Instance -> CCR1 = 70;
 800042e:	4b6c      	ldr	r3, [pc, #432]	; (80005e0 <main+0x2a8>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2246      	movs	r2, #70	; 0x46
 8000434:	635a      	str	r2, [r3, #52]	; 0x34
 8000436:	e01a      	b.n	800046e <main+0x136>
	 		  	  	  }
	 		  	  else if (comp_array[i] == 5) {
 8000438:	4a6c      	ldr	r2, [pc, #432]	; (80005ec <main+0x2b4>)
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000440:	2b05      	cmp	r3, #5
 8000442:	d104      	bne.n	800044e <main+0x116>
	 		  	  		  htim2.Instance -> CCR1 = 50;
 8000444:	4b66      	ldr	r3, [pc, #408]	; (80005e0 <main+0x2a8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2232      	movs	r2, #50	; 0x32
 800044a:	635a      	str	r2, [r3, #52]	; 0x34
 800044c:	e00f      	b.n	800046e <main+0x136>
	 		  	  	  }
	 		  	  else if (comp_array[i] >= 6) {
 800044e:	4a67      	ldr	r2, [pc, #412]	; (80005ec <main+0x2b4>)
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000456:	2b05      	cmp	r3, #5
 8000458:	dd04      	ble.n	8000464 <main+0x12c>
	 		  		  htim2.Instance -> CCR1 = 30;
 800045a:	4b61      	ldr	r3, [pc, #388]	; (80005e0 <main+0x2a8>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	221e      	movs	r2, #30
 8000460:	635a      	str	r2, [r3, #52]	; 0x34
 8000462:	e004      	b.n	800046e <main+0x136>
	 		  	  }
	 		  	  else											//fail safe just in case
	 		  	  {
	 		  		comp_array[i] = 0;
 8000464:	4a61      	ldr	r2, [pc, #388]	; (80005ec <main+0x2b4>)
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	2100      	movs	r1, #0
 800046a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 		  	  }

	 		  	  HAL_Delay(2000);
 800046e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000472:	f001 f855 	bl	8001520 <HAL_Delay>
	 		  for (int i=0; i<5; i++)
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	3301      	adds	r3, #1
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]
 800047e:	2b04      	cmp	r3, #4
 8000480:	ddae      	ble.n	80003e0 <main+0xa8>
	 		  }
	 		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2120      	movs	r1, #32
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f001 fb41 	bl	8001b10 <HAL_GPIO_WritePin>
	 		  htim2.Instance -> CCR1 = 30;
 800048e:	4b54      	ldr	r3, [pc, #336]	; (80005e0 <main+0x2a8>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	221e      	movs	r2, #30
 8000494:	635a      	str	r2, [r3, #52]	; 0x34
	 		  userInput = 1;
 8000496:	4b56      	ldr	r3, [pc, #344]	; (80005f0 <main+0x2b8>)
 8000498:	2201      	movs	r2, #1
 800049a:	601a      	str	r2, [r3, #0]
	 		  start = 0;
 800049c:	4b51      	ldr	r3, [pc, #324]	; (80005e4 <main+0x2ac>)
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
	 	    * 		moves on to victory condition.
	 	    *
	 	    * 		Invalid input: LED flashes and movement is disregarded.
	 	    ******************************************************************************
	 	    */
	 	  while (userInput == 1)
 80004a2:	e0cf      	b.n	8000644 <main+0x30c>
	 	  {
	 		  for (turn=0; turn < 5;)
 80004a4:	4b53      	ldr	r3, [pc, #332]	; (80005f4 <main+0x2bc>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	e0c6      	b.n	800063a <main+0x302>
	 		  {
	 			  if (timer_keep > 0)		/*keeps the system from messing up. If an interrupt occurs when
 80004ac:	4b52      	ldr	r3, [pc, #328]	; (80005f8 <main+0x2c0>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	f340 80c2 	ble.w	800063a <main+0x302>
	 			  						the timer = 1 but the while loop is at if timer = 3, then the
	 			  						timer variable gets reset without actually doing anything.
	 			  						This if statement is my solution to that*/
	 			  {
	 			  	  if (timer_keep == 1) {						//checks timer value
 80004b6:	4b50      	ldr	r3, [pc, #320]	; (80005f8 <main+0x2c0>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d104      	bne.n	80004c8 <main+0x190>
	 			  		  htim2.Instance -> CCR1 = 130;				//affects motor
 80004be:	4b48      	ldr	r3, [pc, #288]	; (80005e0 <main+0x2a8>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2282      	movs	r2, #130	; 0x82
 80004c4:	635a      	str	r2, [r3, #52]	; 0x34
 80004c6:	e046      	b.n	8000556 <main+0x21e>
	 			  	  }
	 			  	  else if (timer_keep == 2) {
 80004c8:	4b4b      	ldr	r3, [pc, #300]	; (80005f8 <main+0x2c0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d104      	bne.n	80004da <main+0x1a2>
	 			  	  		  htim2.Instance -> CCR1 = 110;
 80004d0:	4b43      	ldr	r3, [pc, #268]	; (80005e0 <main+0x2a8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	226e      	movs	r2, #110	; 0x6e
 80004d6:	635a      	str	r2, [r3, #52]	; 0x34
 80004d8:	e03d      	b.n	8000556 <main+0x21e>
	 			  	  	  }
	 			  	  else if (timer_keep == 3) {
 80004da:	4b47      	ldr	r3, [pc, #284]	; (80005f8 <main+0x2c0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d104      	bne.n	80004ec <main+0x1b4>
	 			  	  		  htim2.Instance -> CCR1 = 90;
 80004e2:	4b3f      	ldr	r3, [pc, #252]	; (80005e0 <main+0x2a8>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	225a      	movs	r2, #90	; 0x5a
 80004e8:	635a      	str	r2, [r3, #52]	; 0x34
 80004ea:	e034      	b.n	8000556 <main+0x21e>
	 			  	  	  }
	 			  	  else if (timer_keep == 4) {
 80004ec:	4b42      	ldr	r3, [pc, #264]	; (80005f8 <main+0x2c0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d104      	bne.n	80004fe <main+0x1c6>
	 			  	  		  htim2.Instance -> CCR1 = 70;
 80004f4:	4b3a      	ldr	r3, [pc, #232]	; (80005e0 <main+0x2a8>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2246      	movs	r2, #70	; 0x46
 80004fa:	635a      	str	r2, [r3, #52]	; 0x34
 80004fc:	e02b      	b.n	8000556 <main+0x21e>
	 			  	  	  }
	 			  	  else if (timer_keep == 5) {
 80004fe:	4b3e      	ldr	r3, [pc, #248]	; (80005f8 <main+0x2c0>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b05      	cmp	r3, #5
 8000504:	d104      	bne.n	8000510 <main+0x1d8>
	 			  	  		  htim2.Instance -> CCR1 = 50;
 8000506:	4b36      	ldr	r3, [pc, #216]	; (80005e0 <main+0x2a8>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2232      	movs	r2, #50	; 0x32
 800050c:	635a      	str	r2, [r3, #52]	; 0x34
 800050e:	e022      	b.n	8000556 <main+0x21e>
	 			  	  	  }
	 			  	  else if (timer_keep >= 6) {
 8000510:	4b39      	ldr	r3, [pc, #228]	; (80005f8 <main+0x2c0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b05      	cmp	r3, #5
 8000516:	dd1b      	ble.n	8000550 <main+0x218>
	 					  for (int i = 0; i < 10; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	e014      	b.n	8000548 <main+0x210>
	 					  {
	 						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2120      	movs	r1, #32
 8000522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000526:	f001 faf3 	bl	8001b10 <HAL_GPIO_WritePin>
	 						  HAL_Delay(100);
 800052a:	2064      	movs	r0, #100	; 0x64
 800052c:	f000 fff8 	bl	8001520 <HAL_Delay>
	 						  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2120      	movs	r1, #32
 8000534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000538:	f001 faea 	bl	8001b10 <HAL_GPIO_WritePin>
	 						  HAL_Delay(100);
 800053c:	2064      	movs	r0, #100	; 0x64
 800053e:	f000 ffef 	bl	8001520 <HAL_Delay>
	 					  for (int i = 0; i < 10; i++)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3301      	adds	r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2b09      	cmp	r3, #9
 800054c:	dde7      	ble.n	800051e <main+0x1e6>
	 					  }
	 					  goto DISREGARD;							//If input is above 6, led will flash and movement is ignored
 800054e:	e06e      	b.n	800062e <main+0x2f6>
	 			  	  }
	 			  	  else											//fail safe just in case
	 			  	  {
	 			  		  timer_keep = 0;
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <main+0x2c0>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
	 				    * Compares player input to computer sequence. If incorrect, motor arm resets
	 				    * and LED flashes for 3 seconds. If correct, moves on to next turn and awaits
	 				    * input.
	 				    ******************************************************************************
	 				    */
	 			  	  if (timer_keep != comp_array[turn])
 8000556:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <main+0x2bc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a24      	ldr	r2, [pc, #144]	; (80005ec <main+0x2b4>)
 800055c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <main+0x2c0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	429a      	cmp	r2, r3
 8000566:	d04d      	beq.n	8000604 <main+0x2cc>
	 			  	  {
	 			  		  chance = chance + 1;
 8000568:	4b24      	ldr	r3, [pc, #144]	; (80005fc <main+0x2c4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	4a23      	ldr	r2, [pc, #140]	; (80005fc <main+0x2c4>)
 8000570:	6013      	str	r3, [r2, #0]
	 			  		  if (chance < 3)							//Determines if motor arm should reset
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <main+0x2c4>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b02      	cmp	r3, #2
 8000578:	dc22      	bgt.n	80005c0 <main+0x288>
	 			  		  {
	 			  			HAL_Delay(500);
 800057a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800057e:	f000 ffcf 	bl	8001520 <HAL_Delay>
	 			  			htim2.Instance -> CCR1 = 30;
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <main+0x2a8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	221e      	movs	r2, #30
 8000588:	635a      	str	r2, [r3, #52]	; 0x34
	 						  for (int i = 0; i < 15; i++)
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	e014      	b.n	80005ba <main+0x282>
	 						  {
	 							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2120      	movs	r1, #32
 8000594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000598:	f001 faba 	bl	8001b10 <HAL_GPIO_WritePin>
	 							  HAL_Delay(100);
 800059c:	2064      	movs	r0, #100	; 0x64
 800059e:	f000 ffbf 	bl	8001520 <HAL_Delay>
	 							  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2120      	movs	r1, #32
 80005a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005aa:	f001 fab1 	bl	8001b10 <HAL_GPIO_WritePin>
	 							  HAL_Delay(100);
 80005ae:	2064      	movs	r0, #100	; 0x64
 80005b0:	f000 ffb6 	bl	8001520 <HAL_Delay>
	 						  for (int i = 0; i < 15; i++)
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b0e      	cmp	r3, #14
 80005be:	dde7      	ble.n	8000590 <main+0x258>
	 						  }
	 			  		  }

	 					  if (chance > 2)							//User "loses" after three attempts
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <main+0x2c4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	dd32      	ble.n	800062e <main+0x2f6>
	 					  {
	 						  userInput = 0;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <main+0x2b8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
	 						  turn = 5;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <main+0x2bc>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	601a      	str	r2, [r3, #0]
	 						  currentPosition = timer_keep;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <main+0x2c0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a09      	ldr	r2, [pc, #36]	; (8000600 <main+0x2c8>)
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	e027      	b.n	800062e <main+0x2f6>
 80005de:	bf00      	nop
 80005e0:	200000d0 	.word	0x200000d0
 80005e4:	20000004 	.word	0x20000004
 80005e8:	66666667 	.word	0x66666667
 80005ec:	200000b0 	.word	0x200000b0
 80005f0:	20000098 	.word	0x20000098
 80005f4:	2000009c 	.word	0x2000009c
 80005f8:	20000094 	.word	0x20000094
 80005fc:	200000a0 	.word	0x200000a0
 8000600:	200000a4 	.word	0x200000a4
	 					  }
	 			  	  }
	 			  	  else
	 			  	  {
	 			  		  turn = turn + 1;							//turn moves up if correct input
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <main+0x328>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	4a15      	ldr	r2, [pc, #84]	; (8000660 <main+0x328>)
 800060c:	6013      	str	r3, [r2, #0]
	 			  		  if (turn == 5)							//moves on to the win condition if all 5 are matched
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <main+0x328>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b05      	cmp	r3, #5
 8000614:	d10a      	bne.n	800062c <main+0x2f4>
	 			  		  {
	 			  			  currentPosition = timer_keep;
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <main+0x32c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a13      	ldr	r2, [pc, #76]	; (8000668 <main+0x330>)
 800061c:	6013      	str	r3, [r2, #0]
	 			  			  victory = 1;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <main+0x334>)
 8000620:	2201      	movs	r2, #1
 8000622:	601a      	str	r2, [r3, #0]
	 			  			  userInput = 0;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <main+0x338>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	e000      	b.n	800062e <main+0x2f6>
	 			  		  }
	 			  	  }
	 DISREGARD:
 800062c:	bf00      	nop

	 				  timer_keep = 0;			//timer is reset after motor function
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <main+0x32c>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
	 				  initialDelay = 1;			//delay is turned back on
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <main+0x33c>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
	 		  for (turn=0; turn < 5;)
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <main+0x328>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b04      	cmp	r3, #4
 8000640:	f77f af34 	ble.w	80004ac <main+0x174>
	 	  while (userInput == 1)
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <main+0x338>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	f43f af2b 	beq.w	80004a4 <main+0x16c>
	 	    ******************************************************************************
	 	    * Defeat if statement. LED will flash, and motor will move slowly towards
	 	    * player and back to start.
	 	    ******************************************************************************
	 	    */
	 	  if (chance == 3)
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <main+0x340>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b03      	cmp	r3, #3
 8000654:	f040 82c9 	bne.w	8000bea <main+0x8b2>
	 		  /**
	 		    ******************************************************************************
	 		    * 10Hz delay for 3 sec
	 		    ******************************************************************************
	 		    */
	 		  for (int i = 0; i < 15; i++)
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	e023      	b.n	80006a6 <main+0x36e>
 800065e:	bf00      	nop
 8000660:	2000009c 	.word	0x2000009c
 8000664:	20000094 	.word	0x20000094
 8000668:	200000a4 	.word	0x200000a4
 800066c:	200000a8 	.word	0x200000a8
 8000670:	20000098 	.word	0x20000098
 8000674:	20000000 	.word	0x20000000
 8000678:	200000a0 	.word	0x200000a0
	 		  {
	 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	2120      	movs	r1, #32
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f001 fa44 	bl	8001b10 <HAL_GPIO_WritePin>
	 			  HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f000 ff49 	bl	8001520 <HAL_Delay>
	 			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2120      	movs	r1, #32
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f001 fa3b 	bl	8001b10 <HAL_GPIO_WritePin>
	 			  HAL_Delay(100);
 800069a:	2064      	movs	r0, #100	; 0x64
 800069c:	f000 ff40 	bl	8001520 <HAL_Delay>
	 		  for (int i = 0; i < 15; i++)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3301      	adds	r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b0e      	cmp	r3, #14
 80006aa:	dde7      	ble.n	800067c <main+0x344>
	 		  /**
	 		   ******************************************************************************
	 		   * User Defeat motor movement
	 		   ******************************************************************************
	 		   */
	 		  if (currentPosition == 1)
 80006ac:	4bb1      	ldr	r3, [pc, #708]	; (8000974 <main+0x63c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	f040 80a1 	bne.w	80007f8 <main+0x4c0>
	 		  {
	 			  htim2.Instance -> CCR1 = 130;
 80006b6:	4bb0      	ldr	r3, [pc, #704]	; (8000978 <main+0x640>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2282      	movs	r2, #130	; 0x82
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80006be:	2096      	movs	r0, #150	; 0x96
 80006c0:	f000 ff2e 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 120;
 80006c4:	4bac      	ldr	r3, [pc, #688]	; (8000978 <main+0x640>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2278      	movs	r2, #120	; 0x78
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80006cc:	2096      	movs	r0, #150	; 0x96
 80006ce:	f000 ff27 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 110;
 80006d2:	4ba9      	ldr	r3, [pc, #676]	; (8000978 <main+0x640>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	226e      	movs	r2, #110	; 0x6e
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80006da:	2096      	movs	r0, #150	; 0x96
 80006dc:	f000 ff20 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 100;
 80006e0:	4ba5      	ldr	r3, [pc, #660]	; (8000978 <main+0x640>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2264      	movs	r2, #100	; 0x64
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80006e8:	2096      	movs	r0, #150	; 0x96
 80006ea:	f000 ff19 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 90;
 80006ee:	4ba2      	ldr	r3, [pc, #648]	; (8000978 <main+0x640>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	225a      	movs	r2, #90	; 0x5a
 80006f4:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80006f6:	2096      	movs	r0, #150	; 0x96
 80006f8:	f000 ff12 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 80;
 80006fc:	4b9e      	ldr	r3, [pc, #632]	; (8000978 <main+0x640>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2250      	movs	r2, #80	; 0x50
 8000702:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000704:	2096      	movs	r0, #150	; 0x96
 8000706:	f000 ff0b 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 70;
 800070a:	4b9b      	ldr	r3, [pc, #620]	; (8000978 <main+0x640>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2246      	movs	r2, #70	; 0x46
 8000710:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000712:	2096      	movs	r0, #150	; 0x96
 8000714:	f000 ff04 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 60;
 8000718:	4b97      	ldr	r3, [pc, #604]	; (8000978 <main+0x640>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	223c      	movs	r2, #60	; 0x3c
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000720:	2096      	movs	r0, #150	; 0x96
 8000722:	f000 fefd 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 50;
 8000726:	4b94      	ldr	r3, [pc, #592]	; (8000978 <main+0x640>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2232      	movs	r2, #50	; 0x32
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 800072e:	2096      	movs	r0, #150	; 0x96
 8000730:	f000 fef6 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 40;
 8000734:	4b90      	ldr	r3, [pc, #576]	; (8000978 <main+0x640>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2228      	movs	r2, #40	; 0x28
 800073a:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 800073c:	2096      	movs	r0, #150	; 0x96
 800073e:	f000 feef 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 30;
 8000742:	4b8d      	ldr	r3, [pc, #564]	; (8000978 <main+0x640>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	221e      	movs	r2, #30
 8000748:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 800074a:	2096      	movs	r0, #150	; 0x96
 800074c:	f000 fee8 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 40;
 8000750:	4b89      	ldr	r3, [pc, #548]	; (8000978 <main+0x640>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2228      	movs	r2, #40	; 0x28
 8000756:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000758:	2096      	movs	r0, #150	; 0x96
 800075a:	f000 fee1 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 50;
 800075e:	4b86      	ldr	r3, [pc, #536]	; (8000978 <main+0x640>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2232      	movs	r2, #50	; 0x32
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000766:	2096      	movs	r0, #150	; 0x96
 8000768:	f000 feda 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 60;
 800076c:	4b82      	ldr	r3, [pc, #520]	; (8000978 <main+0x640>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	223c      	movs	r2, #60	; 0x3c
 8000772:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000774:	2096      	movs	r0, #150	; 0x96
 8000776:	f000 fed3 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 70;
 800077a:	4b7f      	ldr	r3, [pc, #508]	; (8000978 <main+0x640>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2246      	movs	r2, #70	; 0x46
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000782:	2096      	movs	r0, #150	; 0x96
 8000784:	f000 fecc 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 80;
 8000788:	4b7b      	ldr	r3, [pc, #492]	; (8000978 <main+0x640>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2250      	movs	r2, #80	; 0x50
 800078e:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000790:	2096      	movs	r0, #150	; 0x96
 8000792:	f000 fec5 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 90;
 8000796:	4b78      	ldr	r3, [pc, #480]	; (8000978 <main+0x640>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	225a      	movs	r2, #90	; 0x5a
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 800079e:	2096      	movs	r0, #150	; 0x96
 80007a0:	f000 febe 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 100;
 80007a4:	4b74      	ldr	r3, [pc, #464]	; (8000978 <main+0x640>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2264      	movs	r2, #100	; 0x64
 80007aa:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80007ac:	2096      	movs	r0, #150	; 0x96
 80007ae:	f000 feb7 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 110;
 80007b2:	4b71      	ldr	r3, [pc, #452]	; (8000978 <main+0x640>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	226e      	movs	r2, #110	; 0x6e
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80007ba:	2096      	movs	r0, #150	; 0x96
 80007bc:	f000 feb0 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 120;
 80007c0:	4b6d      	ldr	r3, [pc, #436]	; (8000978 <main+0x640>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2278      	movs	r2, #120	; 0x78
 80007c6:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 80007c8:	2096      	movs	r0, #150	; 0x96
 80007ca:	f000 fea9 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 130;
 80007ce:	4b6a      	ldr	r3, [pc, #424]	; (8000978 <main+0x640>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2282      	movs	r2, #130	; 0x82
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 80007d6:	2096      	movs	r0, #150	; 0x96
 80007d8:	f000 fea2 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 140;
 80007dc:	4b66      	ldr	r3, [pc, #408]	; (8000978 <main+0x640>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	228c      	movs	r2, #140	; 0x8c
 80007e2:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 80007e4:	2096      	movs	r0, #150	; 0x96
 80007e6:	f000 fe9b 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 150;
 80007ea:	4b63      	ldr	r3, [pc, #396]	; (8000978 <main+0x640>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2296      	movs	r2, #150	; 0x96
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 80007f2:	2096      	movs	r0, #150	; 0x96
 80007f4:	f000 fe94 	bl	8001520 <HAL_Delay>
	 		  }
	 		  if (currentPosition == 2)
 80007f8:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <main+0x63c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	f040 8093 	bne.w	8000928 <main+0x5f0>
	 		  {
	 			  htim2.Instance -> CCR1 = 110;
 8000802:	4b5d      	ldr	r3, [pc, #372]	; (8000978 <main+0x640>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	226e      	movs	r2, #110	; 0x6e
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 800080a:	2096      	movs	r0, #150	; 0x96
 800080c:	f000 fe88 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 100;
 8000810:	4b59      	ldr	r3, [pc, #356]	; (8000978 <main+0x640>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2264      	movs	r2, #100	; 0x64
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000818:	2096      	movs	r0, #150	; 0x96
 800081a:	f000 fe81 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 90;
 800081e:	4b56      	ldr	r3, [pc, #344]	; (8000978 <main+0x640>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	225a      	movs	r2, #90	; 0x5a
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000826:	2096      	movs	r0, #150	; 0x96
 8000828:	f000 fe7a 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 80;
 800082c:	4b52      	ldr	r3, [pc, #328]	; (8000978 <main+0x640>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2250      	movs	r2, #80	; 0x50
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000834:	2096      	movs	r0, #150	; 0x96
 8000836:	f000 fe73 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 70;
 800083a:	4b4f      	ldr	r3, [pc, #316]	; (8000978 <main+0x640>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2246      	movs	r2, #70	; 0x46
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000842:	2096      	movs	r0, #150	; 0x96
 8000844:	f000 fe6c 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 60;
 8000848:	4b4b      	ldr	r3, [pc, #300]	; (8000978 <main+0x640>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	223c      	movs	r2, #60	; 0x3c
 800084e:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000850:	2096      	movs	r0, #150	; 0x96
 8000852:	f000 fe65 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 50;
 8000856:	4b48      	ldr	r3, [pc, #288]	; (8000978 <main+0x640>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2232      	movs	r2, #50	; 0x32
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 800085e:	2096      	movs	r0, #150	; 0x96
 8000860:	f000 fe5e 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 40;
 8000864:	4b44      	ldr	r3, [pc, #272]	; (8000978 <main+0x640>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2228      	movs	r2, #40	; 0x28
 800086a:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 800086c:	2096      	movs	r0, #150	; 0x96
 800086e:	f000 fe57 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 30;
 8000872:	4b41      	ldr	r3, [pc, #260]	; (8000978 <main+0x640>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	221e      	movs	r2, #30
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 800087a:	2096      	movs	r0, #150	; 0x96
 800087c:	f000 fe50 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 40;
 8000880:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <main+0x640>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2228      	movs	r2, #40	; 0x28
 8000886:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000888:	2096      	movs	r0, #150	; 0x96
 800088a:	f000 fe49 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 50;
 800088e:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <main+0x640>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2232      	movs	r2, #50	; 0x32
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000896:	2096      	movs	r0, #150	; 0x96
 8000898:	f000 fe42 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 60;
 800089c:	4b36      	ldr	r3, [pc, #216]	; (8000978 <main+0x640>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	223c      	movs	r2, #60	; 0x3c
 80008a2:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80008a4:	2096      	movs	r0, #150	; 0x96
 80008a6:	f000 fe3b 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 70;
 80008aa:	4b33      	ldr	r3, [pc, #204]	; (8000978 <main+0x640>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2246      	movs	r2, #70	; 0x46
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80008b2:	2096      	movs	r0, #150	; 0x96
 80008b4:	f000 fe34 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 80;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <main+0x640>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2250      	movs	r2, #80	; 0x50
 80008be:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80008c0:	2096      	movs	r0, #150	; 0x96
 80008c2:	f000 fe2d 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 90;
 80008c6:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <main+0x640>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	225a      	movs	r2, #90	; 0x5a
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80008ce:	2096      	movs	r0, #150	; 0x96
 80008d0:	f000 fe26 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 100;
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <main+0x640>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2264      	movs	r2, #100	; 0x64
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80008dc:	2096      	movs	r0, #150	; 0x96
 80008de:	f000 fe1f 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 110;
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <main+0x640>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	226e      	movs	r2, #110	; 0x6e
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80008ea:	2096      	movs	r0, #150	; 0x96
 80008ec:	f000 fe18 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 120;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <main+0x640>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2278      	movs	r2, #120	; 0x78
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 80008f8:	2096      	movs	r0, #150	; 0x96
 80008fa:	f000 fe11 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 130;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <main+0x640>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2282      	movs	r2, #130	; 0x82
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000906:	2096      	movs	r0, #150	; 0x96
 8000908:	f000 fe0a 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 140;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <main+0x640>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	228c      	movs	r2, #140	; 0x8c
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000914:	2096      	movs	r0, #150	; 0x96
 8000916:	f000 fe03 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 150;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <main+0x640>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2296      	movs	r2, #150	; 0x96
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000922:	2096      	movs	r0, #150	; 0x96
 8000924:	f000 fdfc 	bl	8001520 <HAL_Delay>
	 		  }
	 		  if (currentPosition == 3)
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <main+0x63c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b03      	cmp	r3, #3
 800092e:	f040 808a 	bne.w	8000a46 <main+0x70e>
	 		  {
	 			  htim2.Instance -> CCR1 = 90;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <main+0x640>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	225a      	movs	r2, #90	; 0x5a
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 800093a:	2096      	movs	r0, #150	; 0x96
 800093c:	f000 fdf0 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 80;
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <main+0x640>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2250      	movs	r2, #80	; 0x50
 8000946:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000948:	2096      	movs	r0, #150	; 0x96
 800094a:	f000 fde9 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 70;
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <main+0x640>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2246      	movs	r2, #70	; 0x46
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000956:	2096      	movs	r0, #150	; 0x96
 8000958:	f000 fde2 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 60;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <main+0x640>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	223c      	movs	r2, #60	; 0x3c
 8000962:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000964:	2096      	movs	r0, #150	; 0x96
 8000966:	f000 fddb 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 50;
 800096a:	4b03      	ldr	r3, [pc, #12]	; (8000978 <main+0x640>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2232      	movs	r2, #50	; 0x32
 8000970:	635a      	str	r2, [r3, #52]	; 0x34
 8000972:	e003      	b.n	800097c <main+0x644>
 8000974:	200000a4 	.word	0x200000a4
 8000978:	200000d0 	.word	0x200000d0
	 		  	  HAL_Delay(150);
 800097c:	2096      	movs	r0, #150	; 0x96
 800097e:	f000 fdcf 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 40;
 8000982:	4bb0      	ldr	r3, [pc, #704]	; (8000c44 <main+0x90c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2228      	movs	r2, #40	; 0x28
 8000988:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 800098a:	2096      	movs	r0, #150	; 0x96
 800098c:	f000 fdc8 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 30;
 8000990:	4bac      	ldr	r3, [pc, #688]	; (8000c44 <main+0x90c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	221e      	movs	r2, #30
 8000996:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000998:	2096      	movs	r0, #150	; 0x96
 800099a:	f000 fdc1 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 40;
 800099e:	4ba9      	ldr	r3, [pc, #676]	; (8000c44 <main+0x90c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2228      	movs	r2, #40	; 0x28
 80009a4:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80009a6:	2096      	movs	r0, #150	; 0x96
 80009a8:	f000 fdba 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 50;
 80009ac:	4ba5      	ldr	r3, [pc, #660]	; (8000c44 <main+0x90c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2232      	movs	r2, #50	; 0x32
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80009b4:	2096      	movs	r0, #150	; 0x96
 80009b6:	f000 fdb3 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 60;
 80009ba:	4ba2      	ldr	r3, [pc, #648]	; (8000c44 <main+0x90c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	223c      	movs	r2, #60	; 0x3c
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80009c2:	2096      	movs	r0, #150	; 0x96
 80009c4:	f000 fdac 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 70;
 80009c8:	4b9e      	ldr	r3, [pc, #632]	; (8000c44 <main+0x90c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2246      	movs	r2, #70	; 0x46
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80009d0:	2096      	movs	r0, #150	; 0x96
 80009d2:	f000 fda5 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 80;
 80009d6:	4b9b      	ldr	r3, [pc, #620]	; (8000c44 <main+0x90c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2250      	movs	r2, #80	; 0x50
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80009de:	2096      	movs	r0, #150	; 0x96
 80009e0:	f000 fd9e 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 90;
 80009e4:	4b97      	ldr	r3, [pc, #604]	; (8000c44 <main+0x90c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	225a      	movs	r2, #90	; 0x5a
 80009ea:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80009ec:	2096      	movs	r0, #150	; 0x96
 80009ee:	f000 fd97 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 100;
 80009f2:	4b94      	ldr	r3, [pc, #592]	; (8000c44 <main+0x90c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2264      	movs	r2, #100	; 0x64
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 80009fa:	2096      	movs	r0, #150	; 0x96
 80009fc:	f000 fd90 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 110;
 8000a00:	4b90      	ldr	r3, [pc, #576]	; (8000c44 <main+0x90c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	226e      	movs	r2, #110	; 0x6e
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000a08:	2096      	movs	r0, #150	; 0x96
 8000a0a:	f000 fd89 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 120;
 8000a0e:	4b8d      	ldr	r3, [pc, #564]	; (8000c44 <main+0x90c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2278      	movs	r2, #120	; 0x78
 8000a14:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000a16:	2096      	movs	r0, #150	; 0x96
 8000a18:	f000 fd82 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 130;
 8000a1c:	4b89      	ldr	r3, [pc, #548]	; (8000c44 <main+0x90c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2282      	movs	r2, #130	; 0x82
 8000a22:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000a24:	2096      	movs	r0, #150	; 0x96
 8000a26:	f000 fd7b 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 140;
 8000a2a:	4b86      	ldr	r3, [pc, #536]	; (8000c44 <main+0x90c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	228c      	movs	r2, #140	; 0x8c
 8000a30:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000a32:	2096      	movs	r0, #150	; 0x96
 8000a34:	f000 fd74 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 150;
 8000a38:	4b82      	ldr	r3, [pc, #520]	; (8000c44 <main+0x90c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2296      	movs	r2, #150	; 0x96
 8000a3e:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000a40:	2096      	movs	r0, #150	; 0x96
 8000a42:	f000 fd6d 	bl	8001520 <HAL_Delay>
	 		  }
	 		  if (currentPosition == 4)
 8000a46:	4b80      	ldr	r3, [pc, #512]	; (8000c48 <main+0x910>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d176      	bne.n	8000b3c <main+0x804>
	 		  {
	 			  htim2.Instance -> CCR1 = 70;
 8000a4e:	4b7d      	ldr	r3, [pc, #500]	; (8000c44 <main+0x90c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2246      	movs	r2, #70	; 0x46
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000a56:	2096      	movs	r0, #150	; 0x96
 8000a58:	f000 fd62 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 60;
 8000a5c:	4b79      	ldr	r3, [pc, #484]	; (8000c44 <main+0x90c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	223c      	movs	r2, #60	; 0x3c
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000a64:	2096      	movs	r0, #150	; 0x96
 8000a66:	f000 fd5b 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 50;
 8000a6a:	4b76      	ldr	r3, [pc, #472]	; (8000c44 <main+0x90c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2232      	movs	r2, #50	; 0x32
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000a72:	2096      	movs	r0, #150	; 0x96
 8000a74:	f000 fd54 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 40;
 8000a78:	4b72      	ldr	r3, [pc, #456]	; (8000c44 <main+0x90c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2228      	movs	r2, #40	; 0x28
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000a80:	2096      	movs	r0, #150	; 0x96
 8000a82:	f000 fd4d 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 30;
 8000a86:	4b6f      	ldr	r3, [pc, #444]	; (8000c44 <main+0x90c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	221e      	movs	r2, #30
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000a8e:	2096      	movs	r0, #150	; 0x96
 8000a90:	f000 fd46 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 40;
 8000a94:	4b6b      	ldr	r3, [pc, #428]	; (8000c44 <main+0x90c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2228      	movs	r2, #40	; 0x28
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000a9c:	2096      	movs	r0, #150	; 0x96
 8000a9e:	f000 fd3f 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 50;
 8000aa2:	4b68      	ldr	r3, [pc, #416]	; (8000c44 <main+0x90c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2232      	movs	r2, #50	; 0x32
 8000aa8:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000aaa:	2096      	movs	r0, #150	; 0x96
 8000aac:	f000 fd38 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 60;
 8000ab0:	4b64      	ldr	r3, [pc, #400]	; (8000c44 <main+0x90c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	223c      	movs	r2, #60	; 0x3c
 8000ab6:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000ab8:	2096      	movs	r0, #150	; 0x96
 8000aba:	f000 fd31 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 70;
 8000abe:	4b61      	ldr	r3, [pc, #388]	; (8000c44 <main+0x90c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2246      	movs	r2, #70	; 0x46
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000ac6:	2096      	movs	r0, #150	; 0x96
 8000ac8:	f000 fd2a 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 80;
 8000acc:	4b5d      	ldr	r3, [pc, #372]	; (8000c44 <main+0x90c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2250      	movs	r2, #80	; 0x50
 8000ad2:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000ad4:	2096      	movs	r0, #150	; 0x96
 8000ad6:	f000 fd23 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 90;
 8000ada:	4b5a      	ldr	r3, [pc, #360]	; (8000c44 <main+0x90c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	225a      	movs	r2, #90	; 0x5a
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000ae2:	2096      	movs	r0, #150	; 0x96
 8000ae4:	f000 fd1c 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 100;
 8000ae8:	4b56      	ldr	r3, [pc, #344]	; (8000c44 <main+0x90c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2264      	movs	r2, #100	; 0x64
 8000aee:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000af0:	2096      	movs	r0, #150	; 0x96
 8000af2:	f000 fd15 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 110;
 8000af6:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <main+0x90c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	226e      	movs	r2, #110	; 0x6e
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000afe:	2096      	movs	r0, #150	; 0x96
 8000b00:	f000 fd0e 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 120;
 8000b04:	4b4f      	ldr	r3, [pc, #316]	; (8000c44 <main+0x90c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2278      	movs	r2, #120	; 0x78
 8000b0a:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000b0c:	2096      	movs	r0, #150	; 0x96
 8000b0e:	f000 fd07 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 130;
 8000b12:	4b4c      	ldr	r3, [pc, #304]	; (8000c44 <main+0x90c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2282      	movs	r2, #130	; 0x82
 8000b18:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000b1a:	2096      	movs	r0, #150	; 0x96
 8000b1c:	f000 fd00 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 140;
 8000b20:	4b48      	ldr	r3, [pc, #288]	; (8000c44 <main+0x90c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	228c      	movs	r2, #140	; 0x8c
 8000b26:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000b28:	2096      	movs	r0, #150	; 0x96
 8000b2a:	f000 fcf9 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 150;
 8000b2e:	4b45      	ldr	r3, [pc, #276]	; (8000c44 <main+0x90c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2296      	movs	r2, #150	; 0x96
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000b36:	2096      	movs	r0, #150	; 0x96
 8000b38:	f000 fcf2 	bl	8001520 <HAL_Delay>
	 		  }
	 		  if (currentPosition == 5)
 8000b3c:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <main+0x910>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b05      	cmp	r3, #5
 8000b42:	d14c      	bne.n	8000bde <main+0x8a6>
	 		  {

	 			  htim2.Instance -> CCR1 = 50;
 8000b44:	4b3f      	ldr	r3, [pc, #252]	; (8000c44 <main+0x90c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2232      	movs	r2, #50	; 0x32
 8000b4a:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000b4c:	2096      	movs	r0, #150	; 0x96
 8000b4e:	f000 fce7 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 60;
 8000b52:	4b3c      	ldr	r3, [pc, #240]	; (8000c44 <main+0x90c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	223c      	movs	r2, #60	; 0x3c
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000b5a:	2096      	movs	r0, #150	; 0x96
 8000b5c:	f000 fce0 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 70;
 8000b60:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <main+0x90c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2246      	movs	r2, #70	; 0x46
 8000b66:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000b68:	2096      	movs	r0, #150	; 0x96
 8000b6a:	f000 fcd9 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 80;
 8000b6e:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <main+0x90c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2250      	movs	r2, #80	; 0x50
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000b76:	2096      	movs	r0, #150	; 0x96
 8000b78:	f000 fcd2 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 90;
 8000b7c:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <main+0x90c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	225a      	movs	r2, #90	; 0x5a
 8000b82:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000b84:	2096      	movs	r0, #150	; 0x96
 8000b86:	f000 fccb 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 100;
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <main+0x90c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2264      	movs	r2, #100	; 0x64
 8000b90:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000b92:	2096      	movs	r0, #150	; 0x96
 8000b94:	f000 fcc4 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 110;
 8000b98:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <main+0x90c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	226e      	movs	r2, #110	; 0x6e
 8000b9e:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000ba0:	2096      	movs	r0, #150	; 0x96
 8000ba2:	f000 fcbd 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 120;
 8000ba6:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <main+0x90c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2278      	movs	r2, #120	; 0x78
 8000bac:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000bae:	2096      	movs	r0, #150	; 0x96
 8000bb0:	f000 fcb6 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 130;
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <main+0x90c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2282      	movs	r2, #130	; 0x82
 8000bba:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000bbc:	2096      	movs	r0, #150	; 0x96
 8000bbe:	f000 fcaf 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 140;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <main+0x90c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	228c      	movs	r2, #140	; 0x8c
 8000bc8:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000bca:	2096      	movs	r0, #150	; 0x96
 8000bcc:	f000 fca8 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 150;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <main+0x90c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2296      	movs	r2, #150	; 0x96
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000bd8:	2096      	movs	r0, #150	; 0x96
 8000bda:	f000 fca1 	bl	8001520 <HAL_Delay>
	 		  }
	 		  chance = 0;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <main+0x914>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
	 		  resetGame = 1;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <main+0x918>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
	 	  /**
	 	   ******************************************************************************
	 	   * User Victory motor movement
	 	   ******************************************************************************
	 	   */
	 	  if (victory == 1)
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <main+0x91c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	f040 811d 	bne.w	8000e2e <main+0xaf6>
	 	  {
	 		HAL_Delay(200);
 8000bf4:	20c8      	movs	r0, #200	; 0xc8
 8000bf6:	f000 fc93 	bl	8001520 <HAL_Delay>
	 		if (currentPosition == 1)
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <main+0x910>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d114      	bne.n	8000c2c <main+0x8f4>
	 		{
	 		  	  htim2.Instance -> CCR1 = 130;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <main+0x90c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2282      	movs	r2, #130	; 0x82
 8000c08:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000c0a:	2096      	movs	r0, #150	; 0x96
 8000c0c:	f000 fc88 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 140;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <main+0x90c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	228c      	movs	r2, #140	; 0x8c
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000c18:	2096      	movs	r0, #150	; 0x96
 8000c1a:	f000 fc81 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 150;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <main+0x90c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2296      	movs	r2, #150	; 0x96
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000c26:	2096      	movs	r0, #150	; 0x96
 8000c28:	f000 fc7a 	bl	8001520 <HAL_Delay>
	 		}
	 		if (currentPosition == 2)
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <main+0x910>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d12d      	bne.n	8000c90 <main+0x958>
	 		{
	 			  htim2.Instance -> CCR1 = 110;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <main+0x90c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	226e      	movs	r2, #110	; 0x6e
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000c3c:	2096      	movs	r0, #150	; 0x96
 8000c3e:	f000 fc6f 	bl	8001520 <HAL_Delay>
 8000c42:	e009      	b.n	8000c58 <main+0x920>
 8000c44:	200000d0 	.word	0x200000d0
 8000c48:	200000a4 	.word	0x200000a4
 8000c4c:	200000a0 	.word	0x200000a0
 8000c50:	200000ac 	.word	0x200000ac
 8000c54:	200000a8 	.word	0x200000a8
	 		  	  htim2.Instance -> CCR1 = 120;
 8000c58:	4b84      	ldr	r3, [pc, #528]	; (8000e6c <main+0xb34>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2278      	movs	r2, #120	; 0x78
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000c60:	2096      	movs	r0, #150	; 0x96
 8000c62:	f000 fc5d 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 130;
 8000c66:	4b81      	ldr	r3, [pc, #516]	; (8000e6c <main+0xb34>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2282      	movs	r2, #130	; 0x82
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000c6e:	2096      	movs	r0, #150	; 0x96
 8000c70:	f000 fc56 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 140;
 8000c74:	4b7d      	ldr	r3, [pc, #500]	; (8000e6c <main+0xb34>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	228c      	movs	r2, #140	; 0x8c
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000c7c:	2096      	movs	r0, #150	; 0x96
 8000c7e:	f000 fc4f 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 150;
 8000c82:	4b7a      	ldr	r3, [pc, #488]	; (8000e6c <main+0xb34>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2296      	movs	r2, #150	; 0x96
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000c8a:	2096      	movs	r0, #150	; 0x96
 8000c8c:	f000 fc48 	bl	8001520 <HAL_Delay>
	 		}
	 		if (currentPosition == 3)
 8000c90:	4b77      	ldr	r3, [pc, #476]	; (8000e70 <main+0xb38>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d130      	bne.n	8000cfa <main+0x9c2>
	 		{
	 			  htim2.Instance -> CCR1 = 90;
 8000c98:	4b74      	ldr	r3, [pc, #464]	; (8000e6c <main+0xb34>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	225a      	movs	r2, #90	; 0x5a
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000ca0:	2096      	movs	r0, #150	; 0x96
 8000ca2:	f000 fc3d 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 100;
 8000ca6:	4b71      	ldr	r3, [pc, #452]	; (8000e6c <main+0xb34>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2264      	movs	r2, #100	; 0x64
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000cae:	2096      	movs	r0, #150	; 0x96
 8000cb0:	f000 fc36 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 110;
 8000cb4:	4b6d      	ldr	r3, [pc, #436]	; (8000e6c <main+0xb34>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	226e      	movs	r2, #110	; 0x6e
 8000cba:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000cbc:	2096      	movs	r0, #150	; 0x96
 8000cbe:	f000 fc2f 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 120;
 8000cc2:	4b6a      	ldr	r3, [pc, #424]	; (8000e6c <main+0xb34>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2278      	movs	r2, #120	; 0x78
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000cca:	2096      	movs	r0, #150	; 0x96
 8000ccc:	f000 fc28 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 130;
 8000cd0:	4b66      	ldr	r3, [pc, #408]	; (8000e6c <main+0xb34>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2282      	movs	r2, #130	; 0x82
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000cd8:	2096      	movs	r0, #150	; 0x96
 8000cda:	f000 fc21 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 140;
 8000cde:	4b63      	ldr	r3, [pc, #396]	; (8000e6c <main+0xb34>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	228c      	movs	r2, #140	; 0x8c
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000ce6:	2096      	movs	r0, #150	; 0x96
 8000ce8:	f000 fc1a 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 150;
 8000cec:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <main+0xb34>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2296      	movs	r2, #150	; 0x96
 8000cf2:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000cf4:	2096      	movs	r0, #150	; 0x96
 8000cf6:	f000 fc13 	bl	8001520 <HAL_Delay>
	 		}
	 		if (currentPosition == 4)
 8000cfa:	4b5d      	ldr	r3, [pc, #372]	; (8000e70 <main+0xb38>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d13e      	bne.n	8000d80 <main+0xa48>
	 		{
	 			  htim2.Instance -> CCR1 = 70;
 8000d02:	4b5a      	ldr	r3, [pc, #360]	; (8000e6c <main+0xb34>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2246      	movs	r2, #70	; 0x46
 8000d08:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000d0a:	2096      	movs	r0, #150	; 0x96
 8000d0c:	f000 fc08 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 80;
 8000d10:	4b56      	ldr	r3, [pc, #344]	; (8000e6c <main+0xb34>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2250      	movs	r2, #80	; 0x50
 8000d16:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000d18:	2096      	movs	r0, #150	; 0x96
 8000d1a:	f000 fc01 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 90;
 8000d1e:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <main+0xb34>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	225a      	movs	r2, #90	; 0x5a
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000d26:	2096      	movs	r0, #150	; 0x96
 8000d28:	f000 fbfa 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 100;
 8000d2c:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <main+0xb34>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2264      	movs	r2, #100	; 0x64
 8000d32:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000d34:	2096      	movs	r0, #150	; 0x96
 8000d36:	f000 fbf3 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 110;
 8000d3a:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <main+0xb34>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	226e      	movs	r2, #110	; 0x6e
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000d42:	2096      	movs	r0, #150	; 0x96
 8000d44:	f000 fbec 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 120;
 8000d48:	4b48      	ldr	r3, [pc, #288]	; (8000e6c <main+0xb34>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2278      	movs	r2, #120	; 0x78
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000d50:	2096      	movs	r0, #150	; 0x96
 8000d52:	f000 fbe5 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 130;
 8000d56:	4b45      	ldr	r3, [pc, #276]	; (8000e6c <main+0xb34>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2282      	movs	r2, #130	; 0x82
 8000d5c:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000d5e:	2096      	movs	r0, #150	; 0x96
 8000d60:	f000 fbde 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 140;
 8000d64:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <main+0xb34>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	228c      	movs	r2, #140	; 0x8c
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000d6c:	2096      	movs	r0, #150	; 0x96
 8000d6e:	f000 fbd7 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 150;
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <main+0xb34>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2296      	movs	r2, #150	; 0x96
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000d7a:	2096      	movs	r0, #150	; 0x96
 8000d7c:	f000 fbd0 	bl	8001520 <HAL_Delay>
	 		}
	 		if (currentPosition == 5)
 8000d80:	4b3b      	ldr	r3, [pc, #236]	; (8000e70 <main+0xb38>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d14c      	bne.n	8000e22 <main+0xaea>
	 		{
	 			  htim2.Instance -> CCR1 = 50;
 8000d88:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <main+0xb34>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2232      	movs	r2, #50	; 0x32
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000d90:	2096      	movs	r0, #150	; 0x96
 8000d92:	f000 fbc5 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 60;
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <main+0xb34>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	223c      	movs	r2, #60	; 0x3c
 8000d9c:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000d9e:	2096      	movs	r0, #150	; 0x96
 8000da0:	f000 fbbe 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 70;
 8000da4:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <main+0xb34>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2246      	movs	r2, #70	; 0x46
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000dac:	2096      	movs	r0, #150	; 0x96
 8000dae:	f000 fbb7 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 80;
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <main+0xb34>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2250      	movs	r2, #80	; 0x50
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000dba:	2096      	movs	r0, #150	; 0x96
 8000dbc:	f000 fbb0 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 90;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <main+0xb34>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	225a      	movs	r2, #90	; 0x5a
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000dc8:	2096      	movs	r0, #150	; 0x96
 8000dca:	f000 fba9 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 100;
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <main+0xb34>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2264      	movs	r2, #100	; 0x64
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000dd6:	2096      	movs	r0, #150	; 0x96
 8000dd8:	f000 fba2 	bl	8001520 <HAL_Delay>
	 			  htim2.Instance -> CCR1 = 110;
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <main+0xb34>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	226e      	movs	r2, #110	; 0x6e
 8000de2:	635a      	str	r2, [r3, #52]	; 0x34
	 			  HAL_Delay(150);
 8000de4:	2096      	movs	r0, #150	; 0x96
 8000de6:	f000 fb9b 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 120;
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <main+0xb34>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2278      	movs	r2, #120	; 0x78
 8000df0:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000df2:	2096      	movs	r0, #150	; 0x96
 8000df4:	f000 fb94 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 130;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <main+0xb34>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2282      	movs	r2, #130	; 0x82
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000e00:	2096      	movs	r0, #150	; 0x96
 8000e02:	f000 fb8d 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 140;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <main+0xb34>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	228c      	movs	r2, #140	; 0x8c
 8000e0c:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000e0e:	2096      	movs	r0, #150	; 0x96
 8000e10:	f000 fb86 	bl	8001520 <HAL_Delay>
	 		  	  htim2.Instance -> CCR1 = 150;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <main+0xb34>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2296      	movs	r2, #150	; 0x96
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
	 		  	  HAL_Delay(150);
 8000e1c:	2096      	movs	r0, #150	; 0x96
 8000e1e:	f000 fb7f 	bl	8001520 <HAL_Delay>
	 		}
	 		victory = 0;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <main+0xb3c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
	 		resetGame = 1;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <main+0xb40>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]
	 	  /**
	 	   ******************************************************************************
	 	   * Resets the game
	 	   ******************************************************************************
	 	   */
	 	  if (resetGame == 1)
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <main+0xb40>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	f47f aa93 	bne.w	800035e <main+0x26>
	 	  {
	 		  timer_keep = 0;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <main+0xb44>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
	 		  start = 1;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <main+0xb48>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
	 		  userInput = 0;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <main+0xb4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
	 		  turn = 0;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <main+0xb50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
	 		  chance = 0;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <main+0xb54>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
	 		  currentPosition = 0;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <main+0xb38>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
	 		  victory = 0;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <main+0xb3c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
	 		  resetGame = 0;
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <main+0xb40>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
	 	  HAL_Delay(1000);
 8000e68:	f7ff ba79 	b.w	800035e <main+0x26>
 8000e6c:	200000d0 	.word	0x200000d0
 8000e70:	200000a4 	.word	0x200000a4
 8000e74:	200000a8 	.word	0x200000a8
 8000e78:	200000ac 	.word	0x200000ac
 8000e7c:	20000094 	.word	0x20000094
 8000e80:	20000004 	.word	0x20000004
 8000e84:	20000098 	.word	0x20000098
 8000e88:	2000009c 	.word	0x2000009c
 8000e8c:	200000a0 	.word	0x200000a0

08000e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b096      	sub	sp, #88	; 0x58
 8000e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	2244      	movs	r2, #68	; 0x44
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fd00 	bl	80038a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eb6:	f000 fe75 	bl	8001ba4 <HAL_PWREx_ControlVoltageScaling>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ec0:	f000 f82d 	bl	8000f1e <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000ed0:	2370      	movs	r3, #112	; 0x70
 8000ed2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 feb7 	bl	8001c50 <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ee8:	f000 f819 	bl	8000f1e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eec:	230f      	movs	r3, #15
 8000eee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f00:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fa88 	bl	800241c <HAL_RCC_ClockConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000f12:	f000 f804 	bl	8000f1e <Error_Handler>
  }
}
 8000f16:	bf00      	nop
 8000f18:	3758      	adds	r7, #88	; 0x58
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f22:	b672      	cpsid	i
}
 8000f24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <Error_Handler+0x8>

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_MspInit+0x44>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_MspInit+0x44>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_MspInit+0x44>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f50:	6593      	str	r3, [r2, #88]	; 0x58
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_MspInit+0x44>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 fa90 	bl	80014e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fce:	f000 fdb7 	bl	8001b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
	for(int i = 0; i < 65535; i++);				//debouncer
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	e002      	b.n	8000fde <EXTI15_10_IRQHandler+0x1a>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	ddf7      	ble.n	8000fd8 <EXTI15_10_IRQHandler+0x14>
	{


		  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);						//Check for button press
 8000fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fec:	481a      	ldr	r0, [pc, #104]	; (8001058 <EXTI15_10_IRQHandler+0x94>)
 8000fee:	f000 fd77 	bl	8001ae0 <HAL_GPIO_ReadPin>
		    * 	The timer for the motor arm will increment every second.
		    * 	The LED light will blink after one second with a 50% on-off ratio and it
		    * 	will continue to blink every second indicating the timer increment
		    ******************************************************************************
		    */
		  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 8000ff2:	e023      	b.n	800103c <EXTI15_10_IRQHandler+0x78>
		  {

		  if (initialDelay == 1)
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <EXTI15_10_IRQHandler+0x98>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d106      	bne.n	800100a <EXTI15_10_IRQHandler+0x46>
		  {
			  HAL_Delay(1000);
 8000ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001000:	f000 fa8e 	bl	8001520 <HAL_Delay>
			  initialDelay = 0;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <EXTI15_10_IRQHandler+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
		  }
		  timer_keep = timer_keep + 1;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <EXTI15_10_IRQHandler+0x9c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	4a13      	ldr	r2, [pc, #76]	; (8001060 <EXTI15_10_IRQHandler+0x9c>)
 8001012:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	2120      	movs	r1, #32
 8001018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101c:	f000 fd78 	bl	8001b10 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001020:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001024:	f000 fa7c 	bl	8001520 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	2120      	movs	r1, #32
 800102c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001030:	f000 fd6e 	bl	8001b10 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001034:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001038:	f000 fa72 	bl	8001520 <HAL_Delay>
		  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 800103c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <EXTI15_10_IRQHandler+0x94>)
 8001042:	f000 fd4d 	bl	8001ae0 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0d3      	beq.n	8000ff4 <EXTI15_10_IRQHandler+0x30>



	}//end for loop
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	48000800 	.word	0x48000800
 800105c:	20000000 	.word	0x20000000
 8001060:	20000094 	.word	0x20000094

08001064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	return 1;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <_kill>:

int _kill(int pid, int sig)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800107e:	f002 fbe7 	bl	8003850 <__errno>
 8001082:	4603      	mov	r3, r0
 8001084:	2216      	movs	r2, #22
 8001086:	601a      	str	r2, [r3, #0]
	return -1;
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <_exit>:

void _exit (int status)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ffe7 	bl	8001074 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010a6:	e7fe      	b.n	80010a6 <_exit+0x12>

080010a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e00a      	b.n	80010d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ba:	f3af 8000 	nop.w
 80010be:	4601      	mov	r1, r0
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	60ba      	str	r2, [r7, #8]
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf0      	blt.n	80010ba <_read+0x12>
	}

return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	e009      	b.n	8001108 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	60ba      	str	r2, [r7, #8]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbf1      	blt.n	80010f4 <_write+0x12>
	}
	return len;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_close>:

int _close(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
	return -1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001142:	605a      	str	r2, [r3, #4]
	return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_isatty>:

int _isatty(int file)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
	return 1;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
	return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <_sbrk+0x5c>)
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <_sbrk+0x60>)
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <_sbrk+0x64>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <_sbrk+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d207      	bcs.n	80011c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b4:	f002 fb4c 	bl	8003850 <__errno>
 80011b8:	4603      	mov	r3, r0
 80011ba:	220c      	movs	r2, #12
 80011bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e009      	b.n	80011d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <_sbrk+0x64>)
 80011d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20018000 	.word	0x20018000
 80011e4:	00000400 	.word	0x00000400
 80011e8:	200000c4 	.word	0x200000c4
 80011ec:	20000130 	.word	0x20000130

080011f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <SystemInit+0x5c>)
 80011f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <SystemInit+0x5c>)
 80011fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <SystemInit+0x60>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a11      	ldr	r2, [pc, #68]	; (8001250 <SystemInit+0x60>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <SystemInit+0x60>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <SystemInit+0x60>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <SystemInit+0x60>)
 800121c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001220:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001224:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <SystemInit+0x60>)
 8001228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800122c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <SystemInit+0x60>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a07      	ldr	r2, [pc, #28]	; (8001250 <SystemInit+0x60>)
 8001234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SystemInit+0x60>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00
 8001250:	40021000 	.word	0x40021000

08001254 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001274:	463b      	mov	r3, r7
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001286:	4b2d      	ldr	r3, [pc, #180]	; (800133c <MX_TIM2_Init+0xe8>)
 8001288:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128-1;
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <MX_TIM2_Init+0xe8>)
 8001290:	227f      	movs	r2, #127	; 0x7f
 8001292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b29      	ldr	r3, [pc, #164]	; (800133c <MX_TIM2_Init+0xe8>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1250-1;
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <MX_TIM2_Init+0xe8>)
 800129c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80012a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <MX_TIM2_Init+0xe8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <MX_TIM2_Init+0xe8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ae:	4823      	ldr	r0, [pc, #140]	; (800133c <MX_TIM2_Init+0xe8>)
 80012b0:	f001 fa82 	bl	80027b8 <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012ba:	f7ff fe30 	bl	8000f1e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c8:	4619      	mov	r1, r3
 80012ca:	481c      	ldr	r0, [pc, #112]	; (800133c <MX_TIM2_Init+0xe8>)
 80012cc:	f001 fd42 	bl	8002d54 <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012d6:	f7ff fe22 	bl	8000f1e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012da:	4818      	ldr	r0, [pc, #96]	; (800133c <MX_TIM2_Init+0xe8>)
 80012dc:	f001 fac3 	bl	8002866 <HAL_TIM_PWM_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012e6:	f7ff fe1a 	bl	8000f1e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4810      	ldr	r0, [pc, #64]	; (800133c <MX_TIM2_Init+0xe8>)
 80012fa:	f002 fa21 	bl	8003740 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001304:	f7ff fe0b 	bl	8000f1e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32;
 800130c:	2320      	movs	r3, #32
 800130e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_TIM2_Init+0xe8>)
 8001320:	f001 fc08 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800132a:	f7ff fdf8 	bl	8000f1e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800132e:	4803      	ldr	r0, [pc, #12]	; (800133c <MX_TIM2_Init+0xe8>)
 8001330:	f000 f824 	bl	800137c <HAL_TIM_MspPostInit>

}
 8001334:	bf00      	nop
 8001336:	3738      	adds	r7, #56	; 0x38
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000d0 	.word	0x200000d0

08001340 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001350:	d10b      	bne.n	800136a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_TIM_Base_MspInit+0x38>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_TIM_Base_MspInit+0x38>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6593      	str	r3, [r2, #88]	; 0x58
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_TIM_Base_MspInit+0x38>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800139c:	d11c      	bne.n	80013d8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_TIM_MspPostInit+0x64>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_TIM_MspPostInit+0x64>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_TIM_MspPostInit+0x64>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013b6:	2301      	movs	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f000 f9da 	bl	800178c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013d8:	bf00      	nop
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000

080013e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e8:	f7ff ff02 	bl	80011f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013ee:	e003      	b.n	80013f8 <LoopCopyDataInit>

080013f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013f6:	3104      	adds	r1, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001400:	d3f6      	bcc.n	80013f0 <CopyDataInit>
	ldr	r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001404:	e002      	b.n	800140c <LoopFillZerobss>

08001406 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001406:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001408:	f842 3b04 	str.w	r3, [r2], #4

0800140c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <LoopForever+0x16>)
	cmp	r2, r3
 800140e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001410:	d3f9      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001412:	f002 fa23 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001416:	f7fe ff8f 	bl	8000338 <main>

0800141a <LoopForever>:

LoopForever:
    b LoopForever
 800141a:	e7fe      	b.n	800141a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800141c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001420:	08004a64 	.word	0x08004a64
	ldr	r0, =_sdata
 8001424:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001428:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 800142c:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8001430:	20000130 	.word	0x20000130

08001434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC1_2_IRQHandler>

08001436 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f961 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001446:	2001      	movs	r0, #1
 8001448:	f000 f80e 	bl	8001468 <HAL_InitTick>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	71fb      	strb	r3, [r7, #7]
 8001456:	e001      	b.n	800145c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001458:	f7ff fd66 	bl	8000f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800145c:	79fb      	ldrb	r3, [r7, #7]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001470:	2300      	movs	r3, #0
 8001472:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_InitTick+0x6c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d023      	beq.n	80014c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_InitTick+0x70>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_InitTick+0x6c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f96d 	bl	8001772 <HAL_SYSTICK_Config>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d809      	bhi.n	80014b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f937 	bl	800171e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014b0:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <HAL_InitTick+0x74>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e007      	b.n	80014c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	e004      	b.n	80014c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	e001      	b.n	80014c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000010 	.word	0x20000010
 80014d8:	20000008 	.word	0x20000008
 80014dc:	2000000c 	.word	0x2000000c

080014e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_IncTick+0x20>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_IncTick+0x24>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_IncTick+0x24>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000010 	.word	0x20000010
 8001504:	2000011c 	.word	0x2000011c

08001508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTick;
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <HAL_GetTick+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	2000011c 	.word	0x2000011c

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff ffee 	bl	8001508 <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d005      	beq.n	8001546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <HAL_Delay+0x44>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001546:	bf00      	nop
 8001548:	f7ff ffde 	bl	8001508 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d8f7      	bhi.n	8001548 <HAL_Delay+0x28>
  {
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000010 	.word	0x20000010

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <__NVIC_EnableIRQ+0x38>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d4:	d301      	bcc.n	80016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00f      	b.n	80016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <SysTick_Config+0x40>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e2:	210f      	movs	r1, #15
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f7ff ff8e 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <SysTick_Config+0x40>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <SysTick_Config+0x40>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff29 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff3e 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff8e 	bl	800165c <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5d 	bl	8001608 <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff31 	bl	80015cc <__NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffa2 	bl	80016c4 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179a:	e17f      	b.n	8001a9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2101      	movs	r1, #1
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8171 	beq.w	8001a96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d00b      	beq.n	80017d4 <HAL_GPIO_Init+0x48>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b12      	cmp	r3, #18
 80017d2:	d130      	bne.n	8001836 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180a:	2201      	movs	r2, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	f003 0201 	and.w	r2, r3, #1
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b03      	cmp	r3, #3
 8001840:	d118      	bne.n	8001874 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001848:	2201      	movs	r2, #1
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	f003 0201 	and.w	r2, r3, #1
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x128>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b12      	cmp	r3, #18
 80018b2:	d123      	bne.n	80018fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	08da      	lsrs	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3208      	adds	r2, #8
 80018f6:	6939      	ldr	r1, [r7, #16]
 80018f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0203 	and.w	r2, r3, #3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80ac 	beq.w	8001a96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <HAL_GPIO_Init+0x330>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	4a5e      	ldr	r2, [pc, #376]	; (8001abc <HAL_GPIO_Init+0x330>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6613      	str	r3, [r2, #96]	; 0x60
 800194a:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <HAL_GPIO_Init+0x330>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001956:	4a5a      	ldr	r2, [pc, #360]	; (8001ac0 <HAL_GPIO_Init+0x334>)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001980:	d025      	beq.n	80019ce <HAL_GPIO_Init+0x242>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4f      	ldr	r2, [pc, #316]	; (8001ac4 <HAL_GPIO_Init+0x338>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d01f      	beq.n	80019ca <HAL_GPIO_Init+0x23e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <HAL_GPIO_Init+0x33c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d019      	beq.n	80019c6 <HAL_GPIO_Init+0x23a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4d      	ldr	r2, [pc, #308]	; (8001acc <HAL_GPIO_Init+0x340>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0x236>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4c      	ldr	r2, [pc, #304]	; (8001ad0 <HAL_GPIO_Init+0x344>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00d      	beq.n	80019be <HAL_GPIO_Init+0x232>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4b      	ldr	r2, [pc, #300]	; (8001ad4 <HAL_GPIO_Init+0x348>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <HAL_GPIO_Init+0x22e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4a      	ldr	r2, [pc, #296]	; (8001ad8 <HAL_GPIO_Init+0x34c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_GPIO_Init+0x22a>
 80019b2:	2306      	movs	r3, #6
 80019b4:	e00c      	b.n	80019d0 <HAL_GPIO_Init+0x244>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e00a      	b.n	80019d0 <HAL_GPIO_Init+0x244>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e008      	b.n	80019d0 <HAL_GPIO_Init+0x244>
 80019be:	2304      	movs	r3, #4
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x244>
 80019c2:	2303      	movs	r3, #3
 80019c4:	e004      	b.n	80019d0 <HAL_GPIO_Init+0x244>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_Init+0x244>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_GPIO_Init+0x244>
 80019ce:	2300      	movs	r3, #0
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	f002 0203 	and.w	r2, r2, #3
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	4093      	lsls	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019e0:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <HAL_GPIO_Init+0x334>)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	3302      	adds	r3, #2
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_GPIO_Init+0x350>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a12:	4a32      	ldr	r2, [pc, #200]	; (8001adc <HAL_GPIO_Init+0x350>)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a18:	4b30      	ldr	r3, [pc, #192]	; (8001adc <HAL_GPIO_Init+0x350>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3c:	4a27      	ldr	r2, [pc, #156]	; (8001adc <HAL_GPIO_Init+0x350>)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <HAL_GPIO_Init+0x350>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a66:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <HAL_GPIO_Init+0x350>)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_GPIO_Init+0x350>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <HAL_GPIO_Init+0x350>)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f47f ae78 	bne.w	800179c <HAL_GPIO_Init+0x10>
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	48000800 	.word	0x48000800
 8001acc:	48000c00 	.word	0x48000c00
 8001ad0:	48001000 	.word	0x48001000
 8001ad4:	48001400 	.word	0x48001400
 8001ad8:	48001800 	.word	0x48001800
 8001adc:	40010400 	.word	0x40010400

08001ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	887b      	ldrh	r3, [r7, #2]
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	e001      	b.n	8001b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f806 	bl	8001b70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40007000 	.word	0x40007000

08001ba4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb2:	d130      	bne.n	8001c16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc0:	d038      	beq.n	8001c34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bca:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2232      	movs	r2, #50	; 0x32
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	4a1b      	ldr	r2, [pc, #108]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0c9b      	lsrs	r3, r3, #18
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be8:	e002      	b.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfc:	d102      	bne.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f2      	bne.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c10:	d110      	bne.n	8001c34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e00f      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c22:	d007      	beq.n	8001c34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c2c:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40007000 	.word	0x40007000
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	431bde83 	.word	0x431bde83

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e3d4      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c62:	4ba1      	ldr	r3, [pc, #644]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80e4 	beq.w	8001e4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_RCC_OscConfig+0x4a>
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	f040 808b 	bne.w	8001da8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	f040 8087 	bne.w	8001da8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c9a:	4b93      	ldr	r3, [pc, #588]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x62>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e3ac      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1a      	ldr	r2, [r3, #32]
 8001cb6:	4b8c      	ldr	r3, [pc, #560]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d004      	beq.n	8001ccc <HAL_RCC_OscConfig+0x7c>
 8001cc2:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cca:	e005      	b.n	8001cd8 <HAL_RCC_OscConfig+0x88>
 8001ccc:	4b86      	ldr	r3, [pc, #536]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d223      	bcs.n	8001d24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fd09 	bl	80026f8 <RCC_SetFlashLatencyFromMSIRange>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e38d      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf0:	4b7d      	ldr	r3, [pc, #500]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a7c      	ldr	r2, [pc, #496]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b7a      	ldr	r3, [pc, #488]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4977      	ldr	r1, [pc, #476]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0e:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	4972      	ldr	r1, [pc, #456]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
 8001d22:	e025      	b.n	8001d70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d24:	4b70      	ldr	r3, [pc, #448]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6f      	ldr	r2, [pc, #444]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b6d      	ldr	r3, [pc, #436]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	496a      	ldr	r1, [pc, #424]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d42:	4b69      	ldr	r3, [pc, #420]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	4965      	ldr	r1, [pc, #404]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d109      	bne.n	8001d70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fcc9 	bl	80026f8 <RCC_SetFlashLatencyFromMSIRange>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e34d      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d70:	f000 fc36 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b5c      	ldr	r3, [pc, #368]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	495a      	ldr	r1, [pc, #360]	; (8001eec <HAL_RCC_OscConfig+0x29c>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	4a58      	ldr	r2, [pc, #352]	; (8001ef0 <HAL_RCC_OscConfig+0x2a0>)
 8001d8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d90:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <HAL_RCC_OscConfig+0x2a4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fb67 	bl	8001468 <HAL_InitTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d052      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	e331      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d032      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001db0:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a4c      	ldr	r2, [pc, #304]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fba4 	bl	8001508 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fba0 	bl	8001508 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e31a      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de2:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a40      	ldr	r2, [pc, #256]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	493b      	ldr	r1, [pc, #236]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e00:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	4936      	ldr	r1, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e01a      	b.n	8001e4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a33      	ldr	r2, [pc, #204]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fb71 	bl	8001508 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fb6d 	bl	8001508 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e2e7      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x1da>
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d074      	beq.n	8001f42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x21a>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	d10e      	bne.n	8001e82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d10b      	bne.n	8001e82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d064      	beq.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d160      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e2c4      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x24a>
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e01d      	b.n	8001ed6 <HAL_RCC_OscConfig+0x286>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea2:	d10c      	bne.n	8001ebe <HAL_RCC_OscConfig+0x26e>
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	e00b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x286>
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01c      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff fb13 	bl	8001508 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee4:	e011      	b.n	8001f0a <HAL_RCC_OscConfig+0x2ba>
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	080048d0 	.word	0x080048d0
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fb06 	bl	8001508 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e280      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0a:	4baf      	ldr	r3, [pc, #700]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x2a8>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff faf6 	bl	8001508 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff faf2 	bl	8001508 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e26c      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f32:	4ba5      	ldr	r3, [pc, #660]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2d0>
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d060      	beq.n	8002010 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_OscConfig+0x310>
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d119      	bne.n	8001f8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d116      	bne.n	8001f8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f60:	4b99      	ldr	r3, [pc, #612]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_OscConfig+0x328>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e249      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4b93      	ldr	r3, [pc, #588]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	061b      	lsls	r3, r3, #24
 8001f86:	4990      	ldr	r1, [pc, #576]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f8c:	e040      	b.n	8002010 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d023      	beq.n	8001fde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f96:	4b8c      	ldr	r3, [pc, #560]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a8b      	ldr	r2, [pc, #556]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fab1 	bl	8001508 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001faa:	f7ff faad 	bl	8001508 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e227      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fbc:	4b82      	ldr	r3, [pc, #520]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b7f      	ldr	r3, [pc, #508]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	497c      	ldr	r1, [pc, #496]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e018      	b.n	8002010 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b7a      	ldr	r3, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a79      	ldr	r2, [pc, #484]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff fa8d 	bl	8001508 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fa89 	bl	8001508 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e203      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002004:	4b70      	ldr	r3, [pc, #448]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d03c      	beq.n	8002096 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01c      	beq.n	800205e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002024:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202a:	4a67      	ldr	r2, [pc, #412]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff fa68 	bl	8001508 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff fa64 	bl	8001508 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1de      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204e:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ef      	beq.n	800203c <HAL_RCC_OscConfig+0x3ec>
 800205c:	e01b      	b.n	8002096 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205e:	4b5a      	ldr	r3, [pc, #360]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7ff fa4b 	bl	8001508 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002076:	f7ff fa47 	bl	8001508 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e1c1      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002088:	4b4f      	ldr	r3, [pc, #316]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800208a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ef      	bne.n	8002076 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80a6 	beq.w	80021f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10d      	bne.n	80020d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	4a43      	ldr	r2, [pc, #268]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020be:	6593      	str	r3, [r2, #88]	; 0x58
 80020c0:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020cc:	2301      	movs	r3, #1
 80020ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d0:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <HAL_RCC_OscConfig+0x57c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d118      	bne.n	800210e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020dc:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCC_OscConfig+0x57c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <HAL_RCC_OscConfig+0x57c>)
 80020e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e8:	f7ff fa0e 	bl	8001508 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f0:	f7ff fa0a 	bl	8001508 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e184      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002102:	4b32      	ldr	r3, [pc, #200]	; (80021cc <HAL_RCC_OscConfig+0x57c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d108      	bne.n	8002128 <HAL_RCC_OscConfig+0x4d8>
 8002116:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002126:	e024      	b.n	8002172 <HAL_RCC_OscConfig+0x522>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d110      	bne.n	8002152 <HAL_RCC_OscConfig+0x502>
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	4a24      	ldr	r2, [pc, #144]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	4a20      	ldr	r2, [pc, #128]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002150:	e00f      	b.n	8002172 <HAL_RCC_OscConfig+0x522>
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002162:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800216a:	f023 0304 	bic.w	r3, r3, #4
 800216e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7ff f9c5 	bl	8001508 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7ff f9c1 	bl	8001508 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e139      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0ed      	beq.n	8002182 <HAL_RCC_OscConfig+0x532>
 80021a6:	e01a      	b.n	80021de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7ff f9ae 	bl	8001508 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ae:	e00f      	b.n	80021d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7ff f9aa 	bl	8001508 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d906      	bls.n	80021d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e122      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d0:	4b90      	ldr	r3, [pc, #576]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1e8      	bne.n	80021b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021de:	7ffb      	ldrb	r3, [r7, #31]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e4:	4b8b      	ldr	r3, [pc, #556]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	4a8a      	ldr	r2, [pc, #552]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80021ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8108 	beq.w	800240a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	2b02      	cmp	r3, #2
 8002200:	f040 80d0 	bne.w	80023a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002204:	4b83      	ldr	r3, [pc, #524]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 0203 	and.w	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	429a      	cmp	r2, r3
 8002216:	d130      	bne.n	800227a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	3b01      	subs	r3, #1
 8002224:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d127      	bne.n	800227a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002234:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d11f      	bne.n	800227a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002244:	2a07      	cmp	r2, #7
 8002246:	bf14      	ite	ne
 8002248:	2201      	movne	r2, #1
 800224a:	2200      	moveq	r2, #0
 800224c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800224e:	4293      	cmp	r3, r2
 8002250:	d113      	bne.n	800227a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	3b01      	subs	r3, #1
 8002260:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d109      	bne.n	800227a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	3b01      	subs	r3, #1
 8002274:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d06e      	beq.n	8002358 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b0c      	cmp	r3, #12
 800227e:	d069      	beq.n	8002354 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800228c:	4b61      	ldr	r3, [pc, #388]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b7      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800229c:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a5c      	ldr	r2, [pc, #368]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80022a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022a8:	f7ff f92e 	bl	8001508 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7ff f92a 	bl	8001508 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e0a4      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c2:	4b54      	ldr	r3, [pc, #336]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ce:	4b51      	ldr	r3, [pc, #324]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	4b51      	ldr	r3, [pc, #324]	; (8002418 <HAL_RCC_OscConfig+0x7c8>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022de:	3a01      	subs	r2, #1
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022e8:	0212      	lsls	r2, r2, #8
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022f0:	0852      	lsrs	r2, r2, #1
 80022f2:	3a01      	subs	r2, #1
 80022f4:	0552      	lsls	r2, r2, #21
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022fc:	0852      	lsrs	r2, r2, #1
 80022fe:	3a01      	subs	r2, #1
 8002300:	0652      	lsls	r2, r2, #25
 8002302:	4311      	orrs	r1, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002308:	0912      	lsrs	r2, r2, #4
 800230a:	0452      	lsls	r2, r2, #17
 800230c:	430a      	orrs	r2, r1
 800230e:	4941      	ldr	r1, [pc, #260]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002314:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a3e      	ldr	r2, [pc, #248]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 800231a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002320:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800232c:	f7ff f8ec 	bl	8001508 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002334:	f7ff f8e8 	bl	8001508 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e062      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002346:	4b33      	ldr	r3, [pc, #204]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002352:	e05a      	b.n	800240a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e059      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d152      	bne.n	800240a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a2a      	ldr	r2, [pc, #168]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 800236a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800236e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002370:	4b28      	ldr	r3, [pc, #160]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a27      	ldr	r2, [pc, #156]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800237c:	f7ff f8c4 	bl	8001508 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f8c0 	bl	8001508 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e03a      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002396:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x734>
 80023a2:	e032      	b.n	800240a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d02d      	beq.n	8002406 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a19      	ldr	r2, [pc, #100]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4a13      	ldr	r2, [pc, #76]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023c8:	f023 0303 	bic.w	r3, r3, #3
 80023cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4a10      	ldr	r2, [pc, #64]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7ff f893 	bl	8001508 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e6:	f7ff f88f 	bl	8001508 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e009      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x796>
 8002404:	e001      	b.n	800240a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	f99d808c 	.word	0xf99d808c

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0c8      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b66      	ldr	r3, [pc, #408]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d910      	bls.n	8002460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b63      	ldr	r3, [pc, #396]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 0207 	bic.w	r2, r3, #7
 8002446:	4961      	ldr	r1, [pc, #388]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0b0      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d04c      	beq.n	8002506 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d107      	bne.n	8002484 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002474:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d121      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e09e      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d107      	bne.n	800249c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248c:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d115      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e092      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a4:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e086      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b4:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e07e      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c4:	4b42      	ldr	r3, [pc, #264]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 0203 	bic.w	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	493f      	ldr	r1, [pc, #252]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d6:	f7ff f817 	bl	8001508 <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7ff f813 	bl	8001508 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e066      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 020c 	and.w	r2, r3, #12
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	429a      	cmp	r2, r3
 8002504:	d1eb      	bne.n	80024de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002512:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	492c      	ldr	r1, [pc, #176]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b29      	ldr	r3, [pc, #164]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d210      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 0207 	bic.w	r2, r3, #7
 800253a:	4924      	ldr	r1, [pc, #144]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e036      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4918      	ldr	r1, [pc, #96]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4910      	ldr	r1, [pc, #64]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002592:	f000 f825 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	490c      	ldr	r1, [pc, #48]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe ff56 	bl	8001468 <HAL_InitTick>
 80025bc:	4603      	mov	r3, r0
 80025be:	72fb      	strb	r3, [r7, #11]

  return status;
 80025c0:	7afb      	ldrb	r3, [r7, #11]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40021000 	.word	0x40021000
 80025d4:	080048d0 	.word	0x080048d0
 80025d8:	20000008 	.word	0x20000008
 80025dc:	2000000c 	.word	0x2000000c

080025e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ee:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x34>
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d121      	bne.n	8002652 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d11e      	bne.n	8002652 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002614:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002620:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	e005      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800263c:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10d      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b04      	cmp	r3, #4
 8002656:	d102      	bne.n	800265e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	e004      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d101      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002666:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d134      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d003      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0xa6>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d003      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0xac>
 8002684:	e005      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002688:	617b      	str	r3, [r7, #20]
      break;
 800268a:	e005      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800268e:	617b      	str	r3, [r7, #20]
      break;
 8002690:	e002      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	617b      	str	r3, [r7, #20]
      break;
 8002696:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	3301      	adds	r3, #1
 80026a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	fb02 f203 	mul.w	r2, r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	0e5b      	lsrs	r3, r3, #25
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	3301      	adds	r3, #1
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026d8:	69bb      	ldr	r3, [r7, #24]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	080048e0 	.word	0x080048e0
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	007a1200 	.word	0x007a1200

080026f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002704:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002710:	f7ff fa3a 	bl	8001b88 <HAL_PWREx_GetVoltageRange>
 8002714:	6178      	str	r0, [r7, #20]
 8002716:	e014      	b.n	8002742 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	4a24      	ldr	r2, [pc, #144]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002722:	6593      	str	r3, [r2, #88]	; 0x58
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002730:	f7ff fa2a 	bl	8001b88 <HAL_PWREx_GetVoltageRange>
 8002734:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	d10b      	bne.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d919      	bls.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2ba0      	cmp	r3, #160	; 0xa0
 8002754:	d902      	bls.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002756:	2302      	movs	r3, #2
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	e013      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800275c:	2301      	movs	r3, #1
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	e010      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d902      	bls.n	800276e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002768:	2303      	movs	r3, #3
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e00a      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d102      	bne.n	800277a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002774:	2302      	movs	r3, #2
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e004      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b70      	cmp	r3, #112	; 0x70
 800277e:	d101      	bne.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002780:	2301      	movs	r3, #1
 8002782:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 0207 	bic.w	r2, r3, #7
 800278c:	4909      	ldr	r1, [pc, #36]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d001      	beq.n	80027a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40022000 	.word	0x40022000

080027b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e049      	b.n	800285e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fdae 	bl	8001340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f000 fb72 	bl	8002ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e049      	b.n	800290c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f841 	bl	8002914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3304      	adds	r3, #4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f000 fb1b 	bl	8002ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_TIM_PWM_Start+0x24>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	e03c      	b.n	80029c6 <HAL_TIM_PWM_Start+0x9e>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2b04      	cmp	r3, #4
 8002950:	d109      	bne.n	8002966 <HAL_TIM_PWM_Start+0x3e>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	e02f      	b.n	80029c6 <HAL_TIM_PWM_Start+0x9e>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d109      	bne.n	8002980 <HAL_TIM_PWM_Start+0x58>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	e022      	b.n	80029c6 <HAL_TIM_PWM_Start+0x9e>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d109      	bne.n	800299a <HAL_TIM_PWM_Start+0x72>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	bf14      	ite	ne
 8002992:	2301      	movne	r3, #1
 8002994:	2300      	moveq	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	e015      	b.n	80029c6 <HAL_TIM_PWM_Start+0x9e>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b10      	cmp	r3, #16
 800299e:	d109      	bne.n	80029b4 <HAL_TIM_PWM_Start+0x8c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e008      	b.n	80029c6 <HAL_TIM_PWM_Start+0x9e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	bf14      	ite	ne
 80029c0:	2301      	movne	r3, #1
 80029c2:	2300      	moveq	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e09c      	b.n	8002b08 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d104      	bne.n	80029de <HAL_TIM_PWM_Start+0xb6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029dc:	e023      	b.n	8002a26 <HAL_TIM_PWM_Start+0xfe>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d104      	bne.n	80029ee <HAL_TIM_PWM_Start+0xc6>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ec:	e01b      	b.n	8002a26 <HAL_TIM_PWM_Start+0xfe>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d104      	bne.n	80029fe <HAL_TIM_PWM_Start+0xd6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029fc:	e013      	b.n	8002a26 <HAL_TIM_PWM_Start+0xfe>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_PWM_Start+0xe6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a0c:	e00b      	b.n	8002a26 <HAL_TIM_PWM_Start+0xfe>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0xf6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a1c:	e003      	b.n	8002a26 <HAL_TIM_PWM_Start+0xfe>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2202      	movs	r2, #2
 8002a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	6839      	ldr	r1, [r7, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fe60 	bl	80036f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a35      	ldr	r2, [pc, #212]	; (8002b10 <HAL_TIM_PWM_Start+0x1e8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <HAL_TIM_PWM_Start+0x13e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a34      	ldr	r2, [pc, #208]	; (8002b14 <HAL_TIM_PWM_Start+0x1ec>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00e      	beq.n	8002a66 <HAL_TIM_PWM_Start+0x13e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a32      	ldr	r2, [pc, #200]	; (8002b18 <HAL_TIM_PWM_Start+0x1f0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d009      	beq.n	8002a66 <HAL_TIM_PWM_Start+0x13e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a31      	ldr	r2, [pc, #196]	; (8002b1c <HAL_TIM_PWM_Start+0x1f4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_TIM_PWM_Start+0x13e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <HAL_TIM_PWM_Start+0x1f8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_PWM_Start+0x142>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_TIM_PWM_Start+0x144>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <HAL_TIM_PWM_Start+0x1e8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01d      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0x19e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a92:	d018      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0x19e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <HAL_TIM_PWM_Start+0x1fc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0x19e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a21      	ldr	r2, [pc, #132]	; (8002b28 <HAL_TIM_PWM_Start+0x200>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0x19e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <HAL_TIM_PWM_Start+0x204>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0x19e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <HAL_TIM_PWM_Start+0x1ec>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0x19e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <HAL_TIM_PWM_Start+0x1f0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d115      	bne.n	8002af2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <HAL_TIM_PWM_Start+0x208>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b06      	cmp	r3, #6
 8002ad6:	d015      	beq.n	8002b04 <HAL_TIM_PWM_Start+0x1dc>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ade:	d011      	beq.n	8002b04 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af0:	e008      	b.n	8002b04 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	e000      	b.n	8002b06 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	40013400 	.word	0x40013400
 8002b18:	40014000 	.word	0x40014000
 8002b1c:	40014400 	.word	0x40014400
 8002b20:	40014800 	.word	0x40014800
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40000800 	.word	0x40000800
 8002b2c:	40000c00 	.word	0x40000c00
 8002b30:	00010007 	.word	0x00010007

08002b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e0fd      	b.n	8002d4a <HAL_TIM_PWM_ConfigChannel+0x216>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b14      	cmp	r3, #20
 8002b5a:	f200 80f0 	bhi.w	8002d3e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002b5e:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002bb9 	.word	0x08002bb9
 8002b68:	08002d3f 	.word	0x08002d3f
 8002b6c:	08002d3f 	.word	0x08002d3f
 8002b70:	08002d3f 	.word	0x08002d3f
 8002b74:	08002bf9 	.word	0x08002bf9
 8002b78:	08002d3f 	.word	0x08002d3f
 8002b7c:	08002d3f 	.word	0x08002d3f
 8002b80:	08002d3f 	.word	0x08002d3f
 8002b84:	08002c3b 	.word	0x08002c3b
 8002b88:	08002d3f 	.word	0x08002d3f
 8002b8c:	08002d3f 	.word	0x08002d3f
 8002b90:	08002d3f 	.word	0x08002d3f
 8002b94:	08002c7b 	.word	0x08002c7b
 8002b98:	08002d3f 	.word	0x08002d3f
 8002b9c:	08002d3f 	.word	0x08002d3f
 8002ba0:	08002d3f 	.word	0x08002d3f
 8002ba4:	08002cbd 	.word	0x08002cbd
 8002ba8:	08002d3f 	.word	0x08002d3f
 8002bac:	08002d3f 	.word	0x08002d3f
 8002bb0:	08002d3f 	.word	0x08002d3f
 8002bb4:	08002cfd 	.word	0x08002cfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fa28 	bl	8003014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0208 	orr.w	r2, r2, #8
 8002bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0204 	bic.w	r2, r2, #4
 8002be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6999      	ldr	r1, [r3, #24]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	619a      	str	r2, [r3, #24]
      break;
 8002bf6:	e0a3      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fa98 	bl	8003134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6999      	ldr	r1, [r3, #24]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	021a      	lsls	r2, r3, #8
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	619a      	str	r2, [r3, #24]
      break;
 8002c38:	e082      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fb01 	bl	8003248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0208 	orr.w	r2, r2, #8
 8002c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0204 	bic.w	r2, r2, #4
 8002c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69d9      	ldr	r1, [r3, #28]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	61da      	str	r2, [r3, #28]
      break;
 8002c78:	e062      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fb69 	bl	8003358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	021a      	lsls	r2, r3, #8
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	61da      	str	r2, [r3, #28]
      break;
 8002cba:	e041      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fbb2 	bl	800342c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0208 	orr.w	r2, r2, #8
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0204 	bic.w	r2, r2, #4
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002cfa:	e021      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fbf6 	bl	80034f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	021a      	lsls	r2, r3, #8
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d3c:	e000      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8002d3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_TIM_ConfigClockSource+0x18>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e0b5      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x184>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da8:	d03e      	beq.n	8002e28 <HAL_TIM_ConfigClockSource+0xd4>
 8002daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dae:	f200 8087 	bhi.w	8002ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8002db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db6:	f000 8085 	beq.w	8002ec4 <HAL_TIM_ConfigClockSource+0x170>
 8002dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbe:	d87f      	bhi.n	8002ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc0:	2b70      	cmp	r3, #112	; 0x70
 8002dc2:	d01a      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0xa6>
 8002dc4:	2b70      	cmp	r3, #112	; 0x70
 8002dc6:	d87b      	bhi.n	8002ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc8:	2b60      	cmp	r3, #96	; 0x60
 8002dca:	d050      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0x11a>
 8002dcc:	2b60      	cmp	r3, #96	; 0x60
 8002dce:	d877      	bhi.n	8002ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd0:	2b50      	cmp	r3, #80	; 0x50
 8002dd2:	d03c      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0xfa>
 8002dd4:	2b50      	cmp	r3, #80	; 0x50
 8002dd6:	d873      	bhi.n	8002ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	d058      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x13a>
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d86f      	bhi.n	8002ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de0:	2b30      	cmp	r3, #48	; 0x30
 8002de2:	d064      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x15a>
 8002de4:	2b30      	cmp	r3, #48	; 0x30
 8002de6:	d86b      	bhi.n	8002ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d060      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x15a>
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d867      	bhi.n	8002ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d05c      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x15a>
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d05a      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002df8:	e062      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6899      	ldr	r1, [r3, #8]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f000 fc53 	bl	80036b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	609a      	str	r2, [r3, #8]
      break;
 8002e26:	e04e      	b.n	8002ec6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6899      	ldr	r1, [r3, #8]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f000 fc3c 	bl	80036b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e4a:	609a      	str	r2, [r3, #8]
      break;
 8002e4c:	e03b      	b.n	8002ec6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f000 fbb0 	bl	80035c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2150      	movs	r1, #80	; 0x50
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fc09 	bl	800367e <TIM_ITRx_SetConfig>
      break;
 8002e6c:	e02b      	b.n	8002ec6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6859      	ldr	r1, [r3, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f000 fbcf 	bl	800361e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2160      	movs	r1, #96	; 0x60
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fbf9 	bl	800367e <TIM_ITRx_SetConfig>
      break;
 8002e8c:	e01b      	b.n	8002ec6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6859      	ldr	r1, [r3, #4]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f000 fb90 	bl	80035c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2140      	movs	r1, #64	; 0x40
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fbe9 	bl	800367e <TIM_ITRx_SetConfig>
      break;
 8002eac:	e00b      	b.n	8002ec6 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4610      	mov	r0, r2
 8002eba:	f000 fbe0 	bl	800367e <TIM_ITRx_SetConfig>
        break;
 8002ebe:	e002      	b.n	8002ec6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002ec0:	bf00      	nop
 8002ec2:	e000      	b.n	8002ec6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002ec4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a40      	ldr	r2, [pc, #256]	; (8002ff4 <TIM_Base_SetConfig+0x114>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <TIM_Base_SetConfig+0x40>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efe:	d00f      	beq.n	8002f20 <TIM_Base_SetConfig+0x40>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a3d      	ldr	r2, [pc, #244]	; (8002ff8 <TIM_Base_SetConfig+0x118>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00b      	beq.n	8002f20 <TIM_Base_SetConfig+0x40>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a3c      	ldr	r2, [pc, #240]	; (8002ffc <TIM_Base_SetConfig+0x11c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d007      	beq.n	8002f20 <TIM_Base_SetConfig+0x40>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a3b      	ldr	r2, [pc, #236]	; (8003000 <TIM_Base_SetConfig+0x120>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <TIM_Base_SetConfig+0x40>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a3a      	ldr	r2, [pc, #232]	; (8003004 <TIM_Base_SetConfig+0x124>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d108      	bne.n	8002f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a2f      	ldr	r2, [pc, #188]	; (8002ff4 <TIM_Base_SetConfig+0x114>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01f      	beq.n	8002f7a <TIM_Base_SetConfig+0x9a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f40:	d01b      	beq.n	8002f7a <TIM_Base_SetConfig+0x9a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a2c      	ldr	r2, [pc, #176]	; (8002ff8 <TIM_Base_SetConfig+0x118>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d017      	beq.n	8002f7a <TIM_Base_SetConfig+0x9a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a2b      	ldr	r2, [pc, #172]	; (8002ffc <TIM_Base_SetConfig+0x11c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <TIM_Base_SetConfig+0x9a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a2a      	ldr	r2, [pc, #168]	; (8003000 <TIM_Base_SetConfig+0x120>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00f      	beq.n	8002f7a <TIM_Base_SetConfig+0x9a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a29      	ldr	r2, [pc, #164]	; (8003004 <TIM_Base_SetConfig+0x124>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <TIM_Base_SetConfig+0x9a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a28      	ldr	r2, [pc, #160]	; (8003008 <TIM_Base_SetConfig+0x128>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <TIM_Base_SetConfig+0x9a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a27      	ldr	r2, [pc, #156]	; (800300c <TIM_Base_SetConfig+0x12c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <TIM_Base_SetConfig+0x9a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a26      	ldr	r2, [pc, #152]	; (8003010 <TIM_Base_SetConfig+0x130>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d108      	bne.n	8002f8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a10      	ldr	r2, [pc, #64]	; (8002ff4 <TIM_Base_SetConfig+0x114>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00f      	beq.n	8002fd8 <TIM_Base_SetConfig+0xf8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <TIM_Base_SetConfig+0x124>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00b      	beq.n	8002fd8 <TIM_Base_SetConfig+0xf8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a11      	ldr	r2, [pc, #68]	; (8003008 <TIM_Base_SetConfig+0x128>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d007      	beq.n	8002fd8 <TIM_Base_SetConfig+0xf8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a10      	ldr	r2, [pc, #64]	; (800300c <TIM_Base_SetConfig+0x12c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <TIM_Base_SetConfig+0xf8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a0f      	ldr	r2, [pc, #60]	; (8003010 <TIM_Base_SetConfig+0x130>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d103      	bne.n	8002fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	615a      	str	r2, [r3, #20]
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40000400 	.word	0x40000400
 8002ffc:	40000800 	.word	0x40000800
 8003000:	40000c00 	.word	0x40000c00
 8003004:	40013400 	.word	0x40013400
 8003008:	40014000 	.word	0x40014000
 800300c:	40014400 	.word	0x40014400
 8003010:	40014800 	.word	0x40014800

08003014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f023 0201 	bic.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f023 0302 	bic.w	r3, r3, #2
 8003060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <TIM_OC1_SetConfig+0x10c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00f      	beq.n	8003094 <TIM_OC1_SetConfig+0x80>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a2b      	ldr	r2, [pc, #172]	; (8003124 <TIM_OC1_SetConfig+0x110>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00b      	beq.n	8003094 <TIM_OC1_SetConfig+0x80>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <TIM_OC1_SetConfig+0x114>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d007      	beq.n	8003094 <TIM_OC1_SetConfig+0x80>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a29      	ldr	r2, [pc, #164]	; (800312c <TIM_OC1_SetConfig+0x118>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d003      	beq.n	8003094 <TIM_OC1_SetConfig+0x80>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a28      	ldr	r2, [pc, #160]	; (8003130 <TIM_OC1_SetConfig+0x11c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10c      	bne.n	80030ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 0308 	bic.w	r3, r3, #8
 800309a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f023 0304 	bic.w	r3, r3, #4
 80030ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <TIM_OC1_SetConfig+0x10c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00f      	beq.n	80030d6 <TIM_OC1_SetConfig+0xc2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <TIM_OC1_SetConfig+0x110>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00b      	beq.n	80030d6 <TIM_OC1_SetConfig+0xc2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <TIM_OC1_SetConfig+0x114>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <TIM_OC1_SetConfig+0xc2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <TIM_OC1_SetConfig+0x118>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <TIM_OC1_SetConfig+0xc2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a17      	ldr	r2, [pc, #92]	; (8003130 <TIM_OC1_SetConfig+0x11c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d111      	bne.n	80030fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	621a      	str	r2, [r3, #32]
}
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40013400 	.word	0x40013400
 8003128:	40014000 	.word	0x40014000
 800312c:	40014400 	.word	0x40014400
 8003130:	40014800 	.word	0x40014800

08003134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f023 0210 	bic.w	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f023 0320 	bic.w	r3, r3, #32
 8003182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a28      	ldr	r2, [pc, #160]	; (8003234 <TIM_OC2_SetConfig+0x100>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d003      	beq.n	80031a0 <TIM_OC2_SetConfig+0x6c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a27      	ldr	r2, [pc, #156]	; (8003238 <TIM_OC2_SetConfig+0x104>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d10d      	bne.n	80031bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <TIM_OC2_SetConfig+0x100>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00f      	beq.n	80031e4 <TIM_OC2_SetConfig+0xb0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a1c      	ldr	r2, [pc, #112]	; (8003238 <TIM_OC2_SetConfig+0x104>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00b      	beq.n	80031e4 <TIM_OC2_SetConfig+0xb0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a1b      	ldr	r2, [pc, #108]	; (800323c <TIM_OC2_SetConfig+0x108>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d007      	beq.n	80031e4 <TIM_OC2_SetConfig+0xb0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1a      	ldr	r2, [pc, #104]	; (8003240 <TIM_OC2_SetConfig+0x10c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <TIM_OC2_SetConfig+0xb0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a19      	ldr	r2, [pc, #100]	; (8003244 <TIM_OC2_SetConfig+0x110>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d113      	bne.n	800320c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	621a      	str	r2, [r3, #32]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40013400 	.word	0x40013400
 800323c:	40014000 	.word	0x40014000
 8003240:	40014400 	.word	0x40014400
 8003244:	40014800 	.word	0x40014800

08003248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0303 	bic.w	r3, r3, #3
 8003282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a27      	ldr	r2, [pc, #156]	; (8003344 <TIM_OC3_SetConfig+0xfc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <TIM_OC3_SetConfig+0x6a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <TIM_OC3_SetConfig+0x100>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10d      	bne.n	80032ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <TIM_OC3_SetConfig+0xfc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00f      	beq.n	80032f6 <TIM_OC3_SetConfig+0xae>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <TIM_OC3_SetConfig+0x100>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00b      	beq.n	80032f6 <TIM_OC3_SetConfig+0xae>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a1a      	ldr	r2, [pc, #104]	; (800334c <TIM_OC3_SetConfig+0x104>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d007      	beq.n	80032f6 <TIM_OC3_SetConfig+0xae>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <TIM_OC3_SetConfig+0x108>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_OC3_SetConfig+0xae>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a18      	ldr	r2, [pc, #96]	; (8003354 <TIM_OC3_SetConfig+0x10c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d113      	bne.n	800331e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	621a      	str	r2, [r3, #32]
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40013400 	.word	0x40013400
 800334c:	40014000 	.word	0x40014000
 8003350:	40014400 	.word	0x40014400
 8003354:	40014800 	.word	0x40014800

08003358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	031b      	lsls	r3, r3, #12
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a18      	ldr	r2, [pc, #96]	; (8003418 <TIM_OC4_SetConfig+0xc0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00f      	beq.n	80033dc <TIM_OC4_SetConfig+0x84>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a17      	ldr	r2, [pc, #92]	; (800341c <TIM_OC4_SetConfig+0xc4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00b      	beq.n	80033dc <TIM_OC4_SetConfig+0x84>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a16      	ldr	r2, [pc, #88]	; (8003420 <TIM_OC4_SetConfig+0xc8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d007      	beq.n	80033dc <TIM_OC4_SetConfig+0x84>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a15      	ldr	r2, [pc, #84]	; (8003424 <TIM_OC4_SetConfig+0xcc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <TIM_OC4_SetConfig+0x84>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a14      	ldr	r2, [pc, #80]	; (8003428 <TIM_OC4_SetConfig+0xd0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d109      	bne.n	80033f0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	019b      	lsls	r3, r3, #6
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	621a      	str	r2, [r3, #32]
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40013400 	.word	0x40013400
 8003420:	40014000 	.word	0x40014000
 8003424:	40014400 	.word	0x40014400
 8003428:	40014800 	.word	0x40014800

0800342c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <TIM_OC5_SetConfig+0xb4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00f      	beq.n	80034a6 <TIM_OC5_SetConfig+0x7a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a16      	ldr	r2, [pc, #88]	; (80034e4 <TIM_OC5_SetConfig+0xb8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00b      	beq.n	80034a6 <TIM_OC5_SetConfig+0x7a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a15      	ldr	r2, [pc, #84]	; (80034e8 <TIM_OC5_SetConfig+0xbc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <TIM_OC5_SetConfig+0x7a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a14      	ldr	r2, [pc, #80]	; (80034ec <TIM_OC5_SetConfig+0xc0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_OC5_SetConfig+0x7a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a13      	ldr	r2, [pc, #76]	; (80034f0 <TIM_OC5_SetConfig+0xc4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d109      	bne.n	80034ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	621a      	str	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40013400 	.word	0x40013400
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40014400 	.word	0x40014400
 80034f0:	40014800 	.word	0x40014800

080034f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800353a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	051b      	lsls	r3, r3, #20
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a18      	ldr	r2, [pc, #96]	; (80035ac <TIM_OC6_SetConfig+0xb8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00f      	beq.n	8003570 <TIM_OC6_SetConfig+0x7c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <TIM_OC6_SetConfig+0xbc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00b      	beq.n	8003570 <TIM_OC6_SetConfig+0x7c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <TIM_OC6_SetConfig+0xc0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_OC6_SetConfig+0x7c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <TIM_OC6_SetConfig+0xc4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_OC6_SetConfig+0x7c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a14      	ldr	r2, [pc, #80]	; (80035bc <TIM_OC6_SetConfig+0xc8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d109      	bne.n	8003584 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003576:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	029b      	lsls	r3, r3, #10
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	621a      	str	r2, [r3, #32]
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40012c00 	.word	0x40012c00
 80035b0:	40013400 	.word	0x40013400
 80035b4:	40014000 	.word	0x40014000
 80035b8:	40014400 	.word	0x40014400
 80035bc:	40014800 	.word	0x40014800

080035c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f023 0201 	bic.w	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f023 030a 	bic.w	r3, r3, #10
 80035fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361e:	b480      	push	{r7}
 8003620:	b087      	sub	sp, #28
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	f023 0210 	bic.w	r2, r3, #16
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	031b      	lsls	r3, r3, #12
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800365a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	621a      	str	r2, [r3, #32]
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	f043 0307 	orr.w	r3, r3, #7
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	609a      	str	r2, [r3, #8]
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	021a      	lsls	r2, r3, #8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4313      	orrs	r3, r2
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	609a      	str	r2, [r3, #8]
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	2201      	movs	r2, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a1a      	ldr	r2, [r3, #32]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	43db      	mvns	r3, r3
 8003716:	401a      	ands	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1a      	ldr	r2, [r3, #32]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003754:	2302      	movs	r3, #2
 8003756:	e068      	b.n	800382a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2e      	ldr	r2, [pc, #184]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2d      	ldr	r2, [pc, #180]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d108      	bne.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01d      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ca:	d018      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1a      	ldr	r2, [pc, #104]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a13      	ldr	r2, [pc, #76]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a14      	ldr	r2, [pc, #80]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10c      	bne.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	4313      	orrs	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40013400 	.word	0x40013400
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40014000 	.word	0x40014000

08003850 <__errno>:
 8003850:	4b01      	ldr	r3, [pc, #4]	; (8003858 <__errno+0x8>)
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20000014 	.word	0x20000014

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	4d0d      	ldr	r5, [pc, #52]	; (8003894 <__libc_init_array+0x38>)
 8003860:	4c0d      	ldr	r4, [pc, #52]	; (8003898 <__libc_init_array+0x3c>)
 8003862:	1b64      	subs	r4, r4, r5
 8003864:	10a4      	asrs	r4, r4, #2
 8003866:	2600      	movs	r6, #0
 8003868:	42a6      	cmp	r6, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	4d0b      	ldr	r5, [pc, #44]	; (800389c <__libc_init_array+0x40>)
 800386e:	4c0c      	ldr	r4, [pc, #48]	; (80038a0 <__libc_init_array+0x44>)
 8003870:	f001 f822 	bl	80048b8 <_init>
 8003874:	1b64      	subs	r4, r4, r5
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	2600      	movs	r6, #0
 800387a:	42a6      	cmp	r6, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	f855 3b04 	ldr.w	r3, [r5], #4
 8003884:	4798      	blx	r3
 8003886:	3601      	adds	r6, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	f855 3b04 	ldr.w	r3, [r5], #4
 800388e:	4798      	blx	r3
 8003890:	3601      	adds	r6, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	08004a5c 	.word	0x08004a5c
 8003898:	08004a5c 	.word	0x08004a5c
 800389c:	08004a5c 	.word	0x08004a5c
 80038a0:	08004a60 	.word	0x08004a60

080038a4 <memset>:
 80038a4:	4402      	add	r2, r0
 80038a6:	4603      	mov	r3, r0
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d100      	bne.n	80038ae <memset+0xa>
 80038ac:	4770      	bx	lr
 80038ae:	f803 1b01 	strb.w	r1, [r3], #1
 80038b2:	e7f9      	b.n	80038a8 <memset+0x4>

080038b4 <rand>:
 80038b4:	4b17      	ldr	r3, [pc, #92]	; (8003914 <rand+0x60>)
 80038b6:	b510      	push	{r4, lr}
 80038b8:	681c      	ldr	r4, [r3, #0]
 80038ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038bc:	b9b3      	cbnz	r3, 80038ec <rand+0x38>
 80038be:	2018      	movs	r0, #24
 80038c0:	f000 f868 	bl	8003994 <malloc>
 80038c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80038c6:	b928      	cbnz	r0, 80038d4 <rand+0x20>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <rand+0x64>)
 80038cc:	4813      	ldr	r0, [pc, #76]	; (800391c <rand+0x68>)
 80038ce:	214e      	movs	r1, #78	; 0x4e
 80038d0:	f000 f830 	bl	8003934 <__assert_func>
 80038d4:	4a12      	ldr	r2, [pc, #72]	; (8003920 <rand+0x6c>)
 80038d6:	4b13      	ldr	r3, [pc, #76]	; (8003924 <rand+0x70>)
 80038d8:	e9c0 2300 	strd	r2, r3, [r0]
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <rand+0x74>)
 80038de:	6083      	str	r3, [r0, #8]
 80038e0:	230b      	movs	r3, #11
 80038e2:	8183      	strh	r3, [r0, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	2300      	movs	r3, #0
 80038e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80038ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80038ee:	480f      	ldr	r0, [pc, #60]	; (800392c <rand+0x78>)
 80038f0:	690a      	ldr	r2, [r1, #16]
 80038f2:	694b      	ldr	r3, [r1, #20]
 80038f4:	4c0e      	ldr	r4, [pc, #56]	; (8003930 <rand+0x7c>)
 80038f6:	4350      	muls	r0, r2
 80038f8:	fb04 0003 	mla	r0, r4, r3, r0
 80038fc:	fba2 3404 	umull	r3, r4, r2, r4
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	4404      	add	r4, r0
 8003904:	f144 0000 	adc.w	r0, r4, #0
 8003908:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800390c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003910:	bd10      	pop	{r4, pc}
 8003912:	bf00      	nop
 8003914:	20000014 	.word	0x20000014
 8003918:	08004914 	.word	0x08004914
 800391c:	0800492b 	.word	0x0800492b
 8003920:	abcd330e 	.word	0xabcd330e
 8003924:	e66d1234 	.word	0xe66d1234
 8003928:	0005deec 	.word	0x0005deec
 800392c:	5851f42d 	.word	0x5851f42d
 8003930:	4c957f2d 	.word	0x4c957f2d

08003934 <__assert_func>:
 8003934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003936:	4614      	mov	r4, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4b09      	ldr	r3, [pc, #36]	; (8003960 <__assert_func+0x2c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4605      	mov	r5, r0
 8003940:	68d8      	ldr	r0, [r3, #12]
 8003942:	b14c      	cbz	r4, 8003958 <__assert_func+0x24>
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <__assert_func+0x30>)
 8003946:	9100      	str	r1, [sp, #0]
 8003948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800394c:	4906      	ldr	r1, [pc, #24]	; (8003968 <__assert_func+0x34>)
 800394e:	462b      	mov	r3, r5
 8003950:	f000 f80e 	bl	8003970 <fiprintf>
 8003954:	f000 fc8e 	bl	8004274 <abort>
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <__assert_func+0x38>)
 800395a:	461c      	mov	r4, r3
 800395c:	e7f3      	b.n	8003946 <__assert_func+0x12>
 800395e:	bf00      	nop
 8003960:	20000014 	.word	0x20000014
 8003964:	0800498a 	.word	0x0800498a
 8003968:	08004997 	.word	0x08004997
 800396c:	080049c5 	.word	0x080049c5

08003970 <fiprintf>:
 8003970:	b40e      	push	{r1, r2, r3}
 8003972:	b503      	push	{r0, r1, lr}
 8003974:	4601      	mov	r1, r0
 8003976:	ab03      	add	r3, sp, #12
 8003978:	4805      	ldr	r0, [pc, #20]	; (8003990 <fiprintf+0x20>)
 800397a:	f853 2b04 	ldr.w	r2, [r3], #4
 800397e:	6800      	ldr	r0, [r0, #0]
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	f000 f8e3 	bl	8003b4c <_vfiprintf_r>
 8003986:	b002      	add	sp, #8
 8003988:	f85d eb04 	ldr.w	lr, [sp], #4
 800398c:	b003      	add	sp, #12
 800398e:	4770      	bx	lr
 8003990:	20000014 	.word	0x20000014

08003994 <malloc>:
 8003994:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <malloc+0xc>)
 8003996:	4601      	mov	r1, r0
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f000 b853 	b.w	8003a44 <_malloc_r>
 800399e:	bf00      	nop
 80039a0:	20000014 	.word	0x20000014

080039a4 <_free_r>:
 80039a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039a6:	2900      	cmp	r1, #0
 80039a8:	d048      	beq.n	8003a3c <_free_r+0x98>
 80039aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039ae:	9001      	str	r0, [sp, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f1a1 0404 	sub.w	r4, r1, #4
 80039b6:	bfb8      	it	lt
 80039b8:	18e4      	addlt	r4, r4, r3
 80039ba:	f000 fe81 	bl	80046c0 <__malloc_lock>
 80039be:	4a20      	ldr	r2, [pc, #128]	; (8003a40 <_free_r+0x9c>)
 80039c0:	9801      	ldr	r0, [sp, #4]
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	4615      	mov	r5, r2
 80039c6:	b933      	cbnz	r3, 80039d6 <_free_r+0x32>
 80039c8:	6063      	str	r3, [r4, #4]
 80039ca:	6014      	str	r4, [r2, #0]
 80039cc:	b003      	add	sp, #12
 80039ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039d2:	f000 be7b 	b.w	80046cc <__malloc_unlock>
 80039d6:	42a3      	cmp	r3, r4
 80039d8:	d90b      	bls.n	80039f2 <_free_r+0x4e>
 80039da:	6821      	ldr	r1, [r4, #0]
 80039dc:	1862      	adds	r2, r4, r1
 80039de:	4293      	cmp	r3, r2
 80039e0:	bf04      	itt	eq
 80039e2:	681a      	ldreq	r2, [r3, #0]
 80039e4:	685b      	ldreq	r3, [r3, #4]
 80039e6:	6063      	str	r3, [r4, #4]
 80039e8:	bf04      	itt	eq
 80039ea:	1852      	addeq	r2, r2, r1
 80039ec:	6022      	streq	r2, [r4, #0]
 80039ee:	602c      	str	r4, [r5, #0]
 80039f0:	e7ec      	b.n	80039cc <_free_r+0x28>
 80039f2:	461a      	mov	r2, r3
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	b10b      	cbz	r3, 80039fc <_free_r+0x58>
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	d9fa      	bls.n	80039f2 <_free_r+0x4e>
 80039fc:	6811      	ldr	r1, [r2, #0]
 80039fe:	1855      	adds	r5, r2, r1
 8003a00:	42a5      	cmp	r5, r4
 8003a02:	d10b      	bne.n	8003a1c <_free_r+0x78>
 8003a04:	6824      	ldr	r4, [r4, #0]
 8003a06:	4421      	add	r1, r4
 8003a08:	1854      	adds	r4, r2, r1
 8003a0a:	42a3      	cmp	r3, r4
 8003a0c:	6011      	str	r1, [r2, #0]
 8003a0e:	d1dd      	bne.n	80039cc <_free_r+0x28>
 8003a10:	681c      	ldr	r4, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	6053      	str	r3, [r2, #4]
 8003a16:	4421      	add	r1, r4
 8003a18:	6011      	str	r1, [r2, #0]
 8003a1a:	e7d7      	b.n	80039cc <_free_r+0x28>
 8003a1c:	d902      	bls.n	8003a24 <_free_r+0x80>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	6003      	str	r3, [r0, #0]
 8003a22:	e7d3      	b.n	80039cc <_free_r+0x28>
 8003a24:	6825      	ldr	r5, [r4, #0]
 8003a26:	1961      	adds	r1, r4, r5
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	bf04      	itt	eq
 8003a2c:	6819      	ldreq	r1, [r3, #0]
 8003a2e:	685b      	ldreq	r3, [r3, #4]
 8003a30:	6063      	str	r3, [r4, #4]
 8003a32:	bf04      	itt	eq
 8003a34:	1949      	addeq	r1, r1, r5
 8003a36:	6021      	streq	r1, [r4, #0]
 8003a38:	6054      	str	r4, [r2, #4]
 8003a3a:	e7c7      	b.n	80039cc <_free_r+0x28>
 8003a3c:	b003      	add	sp, #12
 8003a3e:	bd30      	pop	{r4, r5, pc}
 8003a40:	200000c8 	.word	0x200000c8

08003a44 <_malloc_r>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	1ccd      	adds	r5, r1, #3
 8003a48:	f025 0503 	bic.w	r5, r5, #3
 8003a4c:	3508      	adds	r5, #8
 8003a4e:	2d0c      	cmp	r5, #12
 8003a50:	bf38      	it	cc
 8003a52:	250c      	movcc	r5, #12
 8003a54:	2d00      	cmp	r5, #0
 8003a56:	4606      	mov	r6, r0
 8003a58:	db01      	blt.n	8003a5e <_malloc_r+0x1a>
 8003a5a:	42a9      	cmp	r1, r5
 8003a5c:	d903      	bls.n	8003a66 <_malloc_r+0x22>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	6033      	str	r3, [r6, #0]
 8003a62:	2000      	movs	r0, #0
 8003a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a66:	f000 fe2b 	bl	80046c0 <__malloc_lock>
 8003a6a:	4921      	ldr	r1, [pc, #132]	; (8003af0 <_malloc_r+0xac>)
 8003a6c:	680a      	ldr	r2, [r1, #0]
 8003a6e:	4614      	mov	r4, r2
 8003a70:	b99c      	cbnz	r4, 8003a9a <_malloc_r+0x56>
 8003a72:	4f20      	ldr	r7, [pc, #128]	; (8003af4 <_malloc_r+0xb0>)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	b923      	cbnz	r3, 8003a82 <_malloc_r+0x3e>
 8003a78:	4621      	mov	r1, r4
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	f000 fb2a 	bl	80040d4 <_sbrk_r>
 8003a80:	6038      	str	r0, [r7, #0]
 8003a82:	4629      	mov	r1, r5
 8003a84:	4630      	mov	r0, r6
 8003a86:	f000 fb25 	bl	80040d4 <_sbrk_r>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	d123      	bne.n	8003ad6 <_malloc_r+0x92>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	4630      	mov	r0, r6
 8003a94:	f000 fe1a 	bl	80046cc <__malloc_unlock>
 8003a98:	e7e3      	b.n	8003a62 <_malloc_r+0x1e>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	1b5b      	subs	r3, r3, r5
 8003a9e:	d417      	bmi.n	8003ad0 <_malloc_r+0x8c>
 8003aa0:	2b0b      	cmp	r3, #11
 8003aa2:	d903      	bls.n	8003aac <_malloc_r+0x68>
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	441c      	add	r4, r3
 8003aa8:	6025      	str	r5, [r4, #0]
 8003aaa:	e004      	b.n	8003ab6 <_malloc_r+0x72>
 8003aac:	6863      	ldr	r3, [r4, #4]
 8003aae:	42a2      	cmp	r2, r4
 8003ab0:	bf0c      	ite	eq
 8003ab2:	600b      	streq	r3, [r1, #0]
 8003ab4:	6053      	strne	r3, [r2, #4]
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f000 fe08 	bl	80046cc <__malloc_unlock>
 8003abc:	f104 000b 	add.w	r0, r4, #11
 8003ac0:	1d23      	adds	r3, r4, #4
 8003ac2:	f020 0007 	bic.w	r0, r0, #7
 8003ac6:	1ac2      	subs	r2, r0, r3
 8003ac8:	d0cc      	beq.n	8003a64 <_malloc_r+0x20>
 8003aca:	1a1b      	subs	r3, r3, r0
 8003acc:	50a3      	str	r3, [r4, r2]
 8003ace:	e7c9      	b.n	8003a64 <_malloc_r+0x20>
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	6864      	ldr	r4, [r4, #4]
 8003ad4:	e7cc      	b.n	8003a70 <_malloc_r+0x2c>
 8003ad6:	1cc4      	adds	r4, r0, #3
 8003ad8:	f024 0403 	bic.w	r4, r4, #3
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d0e3      	beq.n	8003aa8 <_malloc_r+0x64>
 8003ae0:	1a21      	subs	r1, r4, r0
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f000 faf6 	bl	80040d4 <_sbrk_r>
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d1dd      	bne.n	8003aa8 <_malloc_r+0x64>
 8003aec:	e7cf      	b.n	8003a8e <_malloc_r+0x4a>
 8003aee:	bf00      	nop
 8003af0:	200000c8 	.word	0x200000c8
 8003af4:	200000cc 	.word	0x200000cc

08003af8 <__sfputc_r>:
 8003af8:	6893      	ldr	r3, [r2, #8]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	b410      	push	{r4}
 8003b00:	6093      	str	r3, [r2, #8]
 8003b02:	da08      	bge.n	8003b16 <__sfputc_r+0x1e>
 8003b04:	6994      	ldr	r4, [r2, #24]
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	db01      	blt.n	8003b0e <__sfputc_r+0x16>
 8003b0a:	290a      	cmp	r1, #10
 8003b0c:	d103      	bne.n	8003b16 <__sfputc_r+0x1e>
 8003b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b12:	f000 baef 	b.w	80040f4 <__swbuf_r>
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	1c58      	adds	r0, r3, #1
 8003b1a:	6010      	str	r0, [r2, #0]
 8003b1c:	7019      	strb	r1, [r3, #0]
 8003b1e:	4608      	mov	r0, r1
 8003b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <__sfputs_r>:
 8003b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b28:	4606      	mov	r6, r0
 8003b2a:	460f      	mov	r7, r1
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	18d5      	adds	r5, r2, r3
 8003b30:	42ac      	cmp	r4, r5
 8003b32:	d101      	bne.n	8003b38 <__sfputs_r+0x12>
 8003b34:	2000      	movs	r0, #0
 8003b36:	e007      	b.n	8003b48 <__sfputs_r+0x22>
 8003b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b3c:	463a      	mov	r2, r7
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f7ff ffda 	bl	8003af8 <__sfputc_r>
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d1f3      	bne.n	8003b30 <__sfputs_r+0xa>
 8003b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b4c <_vfiprintf_r>:
 8003b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b50:	460d      	mov	r5, r1
 8003b52:	b09d      	sub	sp, #116	; 0x74
 8003b54:	4614      	mov	r4, r2
 8003b56:	4698      	mov	r8, r3
 8003b58:	4606      	mov	r6, r0
 8003b5a:	b118      	cbz	r0, 8003b64 <_vfiprintf_r+0x18>
 8003b5c:	6983      	ldr	r3, [r0, #24]
 8003b5e:	b90b      	cbnz	r3, 8003b64 <_vfiprintf_r+0x18>
 8003b60:	f000 fcaa 	bl	80044b8 <__sinit>
 8003b64:	4b89      	ldr	r3, [pc, #548]	; (8003d8c <_vfiprintf_r+0x240>)
 8003b66:	429d      	cmp	r5, r3
 8003b68:	d11b      	bne.n	8003ba2 <_vfiprintf_r+0x56>
 8003b6a:	6875      	ldr	r5, [r6, #4]
 8003b6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b6e:	07d9      	lsls	r1, r3, #31
 8003b70:	d405      	bmi.n	8003b7e <_vfiprintf_r+0x32>
 8003b72:	89ab      	ldrh	r3, [r5, #12]
 8003b74:	059a      	lsls	r2, r3, #22
 8003b76:	d402      	bmi.n	8003b7e <_vfiprintf_r+0x32>
 8003b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b7a:	f000 fd3b 	bl	80045f4 <__retarget_lock_acquire_recursive>
 8003b7e:	89ab      	ldrh	r3, [r5, #12]
 8003b80:	071b      	lsls	r3, r3, #28
 8003b82:	d501      	bpl.n	8003b88 <_vfiprintf_r+0x3c>
 8003b84:	692b      	ldr	r3, [r5, #16]
 8003b86:	b9eb      	cbnz	r3, 8003bc4 <_vfiprintf_r+0x78>
 8003b88:	4629      	mov	r1, r5
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f000 fb04 	bl	8004198 <__swsetup_r>
 8003b90:	b1c0      	cbz	r0, 8003bc4 <_vfiprintf_r+0x78>
 8003b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b94:	07dc      	lsls	r4, r3, #31
 8003b96:	d50e      	bpl.n	8003bb6 <_vfiprintf_r+0x6a>
 8003b98:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9c:	b01d      	add	sp, #116	; 0x74
 8003b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba2:	4b7b      	ldr	r3, [pc, #492]	; (8003d90 <_vfiprintf_r+0x244>)
 8003ba4:	429d      	cmp	r5, r3
 8003ba6:	d101      	bne.n	8003bac <_vfiprintf_r+0x60>
 8003ba8:	68b5      	ldr	r5, [r6, #8]
 8003baa:	e7df      	b.n	8003b6c <_vfiprintf_r+0x20>
 8003bac:	4b79      	ldr	r3, [pc, #484]	; (8003d94 <_vfiprintf_r+0x248>)
 8003bae:	429d      	cmp	r5, r3
 8003bb0:	bf08      	it	eq
 8003bb2:	68f5      	ldreq	r5, [r6, #12]
 8003bb4:	e7da      	b.n	8003b6c <_vfiprintf_r+0x20>
 8003bb6:	89ab      	ldrh	r3, [r5, #12]
 8003bb8:	0598      	lsls	r0, r3, #22
 8003bba:	d4ed      	bmi.n	8003b98 <_vfiprintf_r+0x4c>
 8003bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bbe:	f000 fd1a 	bl	80045f6 <__retarget_lock_release_recursive>
 8003bc2:	e7e9      	b.n	8003b98 <_vfiprintf_r+0x4c>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc8:	2320      	movs	r3, #32
 8003bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bd2:	2330      	movs	r3, #48	; 0x30
 8003bd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003d98 <_vfiprintf_r+0x24c>
 8003bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bdc:	f04f 0901 	mov.w	r9, #1
 8003be0:	4623      	mov	r3, r4
 8003be2:	469a      	mov	sl, r3
 8003be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003be8:	b10a      	cbz	r2, 8003bee <_vfiprintf_r+0xa2>
 8003bea:	2a25      	cmp	r2, #37	; 0x25
 8003bec:	d1f9      	bne.n	8003be2 <_vfiprintf_r+0x96>
 8003bee:	ebba 0b04 	subs.w	fp, sl, r4
 8003bf2:	d00b      	beq.n	8003c0c <_vfiprintf_r+0xc0>
 8003bf4:	465b      	mov	r3, fp
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f7ff ff93 	bl	8003b26 <__sfputs_r>
 8003c00:	3001      	adds	r0, #1
 8003c02:	f000 80aa 	beq.w	8003d5a <_vfiprintf_r+0x20e>
 8003c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c08:	445a      	add	r2, fp
 8003c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8003c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80a2 	beq.w	8003d5a <_vfiprintf_r+0x20e>
 8003c16:	2300      	movs	r3, #0
 8003c18:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c20:	f10a 0a01 	add.w	sl, sl, #1
 8003c24:	9304      	str	r3, [sp, #16]
 8003c26:	9307      	str	r3, [sp, #28]
 8003c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8003c2e:	4654      	mov	r4, sl
 8003c30:	2205      	movs	r2, #5
 8003c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c36:	4858      	ldr	r0, [pc, #352]	; (8003d98 <_vfiprintf_r+0x24c>)
 8003c38:	f7fc faca 	bl	80001d0 <memchr>
 8003c3c:	9a04      	ldr	r2, [sp, #16]
 8003c3e:	b9d8      	cbnz	r0, 8003c78 <_vfiprintf_r+0x12c>
 8003c40:	06d1      	lsls	r1, r2, #27
 8003c42:	bf44      	itt	mi
 8003c44:	2320      	movmi	r3, #32
 8003c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c4a:	0713      	lsls	r3, r2, #28
 8003c4c:	bf44      	itt	mi
 8003c4e:	232b      	movmi	r3, #43	; 0x2b
 8003c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c54:	f89a 3000 	ldrb.w	r3, [sl]
 8003c58:	2b2a      	cmp	r3, #42	; 0x2a
 8003c5a:	d015      	beq.n	8003c88 <_vfiprintf_r+0x13c>
 8003c5c:	9a07      	ldr	r2, [sp, #28]
 8003c5e:	4654      	mov	r4, sl
 8003c60:	2000      	movs	r0, #0
 8003c62:	f04f 0c0a 	mov.w	ip, #10
 8003c66:	4621      	mov	r1, r4
 8003c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c6c:	3b30      	subs	r3, #48	; 0x30
 8003c6e:	2b09      	cmp	r3, #9
 8003c70:	d94e      	bls.n	8003d10 <_vfiprintf_r+0x1c4>
 8003c72:	b1b0      	cbz	r0, 8003ca2 <_vfiprintf_r+0x156>
 8003c74:	9207      	str	r2, [sp, #28]
 8003c76:	e014      	b.n	8003ca2 <_vfiprintf_r+0x156>
 8003c78:	eba0 0308 	sub.w	r3, r0, r8
 8003c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8003c80:	4313      	orrs	r3, r2
 8003c82:	9304      	str	r3, [sp, #16]
 8003c84:	46a2      	mov	sl, r4
 8003c86:	e7d2      	b.n	8003c2e <_vfiprintf_r+0xe2>
 8003c88:	9b03      	ldr	r3, [sp, #12]
 8003c8a:	1d19      	adds	r1, r3, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	9103      	str	r1, [sp, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bfbb      	ittet	lt
 8003c94:	425b      	neglt	r3, r3
 8003c96:	f042 0202 	orrlt.w	r2, r2, #2
 8003c9a:	9307      	strge	r3, [sp, #28]
 8003c9c:	9307      	strlt	r3, [sp, #28]
 8003c9e:	bfb8      	it	lt
 8003ca0:	9204      	strlt	r2, [sp, #16]
 8003ca2:	7823      	ldrb	r3, [r4, #0]
 8003ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ca6:	d10c      	bne.n	8003cc2 <_vfiprintf_r+0x176>
 8003ca8:	7863      	ldrb	r3, [r4, #1]
 8003caa:	2b2a      	cmp	r3, #42	; 0x2a
 8003cac:	d135      	bne.n	8003d1a <_vfiprintf_r+0x1ce>
 8003cae:	9b03      	ldr	r3, [sp, #12]
 8003cb0:	1d1a      	adds	r2, r3, #4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	9203      	str	r2, [sp, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bfb8      	it	lt
 8003cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cbe:	3402      	adds	r4, #2
 8003cc0:	9305      	str	r3, [sp, #20]
 8003cc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003da8 <_vfiprintf_r+0x25c>
 8003cc6:	7821      	ldrb	r1, [r4, #0]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	4650      	mov	r0, sl
 8003ccc:	f7fc fa80 	bl	80001d0 <memchr>
 8003cd0:	b140      	cbz	r0, 8003ce4 <_vfiprintf_r+0x198>
 8003cd2:	2340      	movs	r3, #64	; 0x40
 8003cd4:	eba0 000a 	sub.w	r0, r0, sl
 8003cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8003cdc:	9b04      	ldr	r3, [sp, #16]
 8003cde:	4303      	orrs	r3, r0
 8003ce0:	3401      	adds	r4, #1
 8003ce2:	9304      	str	r3, [sp, #16]
 8003ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ce8:	482c      	ldr	r0, [pc, #176]	; (8003d9c <_vfiprintf_r+0x250>)
 8003cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cee:	2206      	movs	r2, #6
 8003cf0:	f7fc fa6e 	bl	80001d0 <memchr>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d03f      	beq.n	8003d78 <_vfiprintf_r+0x22c>
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <_vfiprintf_r+0x254>)
 8003cfa:	bb1b      	cbnz	r3, 8003d44 <_vfiprintf_r+0x1f8>
 8003cfc:	9b03      	ldr	r3, [sp, #12]
 8003cfe:	3307      	adds	r3, #7
 8003d00:	f023 0307 	bic.w	r3, r3, #7
 8003d04:	3308      	adds	r3, #8
 8003d06:	9303      	str	r3, [sp, #12]
 8003d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0a:	443b      	add	r3, r7
 8003d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0e:	e767      	b.n	8003be0 <_vfiprintf_r+0x94>
 8003d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d14:	460c      	mov	r4, r1
 8003d16:	2001      	movs	r0, #1
 8003d18:	e7a5      	b.n	8003c66 <_vfiprintf_r+0x11a>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	3401      	adds	r4, #1
 8003d1e:	9305      	str	r3, [sp, #20]
 8003d20:	4619      	mov	r1, r3
 8003d22:	f04f 0c0a 	mov.w	ip, #10
 8003d26:	4620      	mov	r0, r4
 8003d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d2c:	3a30      	subs	r2, #48	; 0x30
 8003d2e:	2a09      	cmp	r2, #9
 8003d30:	d903      	bls.n	8003d3a <_vfiprintf_r+0x1ee>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0c5      	beq.n	8003cc2 <_vfiprintf_r+0x176>
 8003d36:	9105      	str	r1, [sp, #20]
 8003d38:	e7c3      	b.n	8003cc2 <_vfiprintf_r+0x176>
 8003d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d3e:	4604      	mov	r4, r0
 8003d40:	2301      	movs	r3, #1
 8003d42:	e7f0      	b.n	8003d26 <_vfiprintf_r+0x1da>
 8003d44:	ab03      	add	r3, sp, #12
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	462a      	mov	r2, r5
 8003d4a:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <_vfiprintf_r+0x258>)
 8003d4c:	a904      	add	r1, sp, #16
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f3af 8000 	nop.w
 8003d54:	4607      	mov	r7, r0
 8003d56:	1c78      	adds	r0, r7, #1
 8003d58:	d1d6      	bne.n	8003d08 <_vfiprintf_r+0x1bc>
 8003d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d5c:	07d9      	lsls	r1, r3, #31
 8003d5e:	d405      	bmi.n	8003d6c <_vfiprintf_r+0x220>
 8003d60:	89ab      	ldrh	r3, [r5, #12]
 8003d62:	059a      	lsls	r2, r3, #22
 8003d64:	d402      	bmi.n	8003d6c <_vfiprintf_r+0x220>
 8003d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d68:	f000 fc45 	bl	80045f6 <__retarget_lock_release_recursive>
 8003d6c:	89ab      	ldrh	r3, [r5, #12]
 8003d6e:	065b      	lsls	r3, r3, #25
 8003d70:	f53f af12 	bmi.w	8003b98 <_vfiprintf_r+0x4c>
 8003d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d76:	e711      	b.n	8003b9c <_vfiprintf_r+0x50>
 8003d78:	ab03      	add	r3, sp, #12
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	462a      	mov	r2, r5
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <_vfiprintf_r+0x258>)
 8003d80:	a904      	add	r1, sp, #16
 8003d82:	4630      	mov	r0, r6
 8003d84:	f000 f880 	bl	8003e88 <_printf_i>
 8003d88:	e7e4      	b.n	8003d54 <_vfiprintf_r+0x208>
 8003d8a:	bf00      	nop
 8003d8c:	08004a1c 	.word	0x08004a1c
 8003d90:	08004a3c 	.word	0x08004a3c
 8003d94:	080049fc 	.word	0x080049fc
 8003d98:	080049c6 	.word	0x080049c6
 8003d9c:	080049d0 	.word	0x080049d0
 8003da0:	00000000 	.word	0x00000000
 8003da4:	08003b27 	.word	0x08003b27
 8003da8:	080049cc 	.word	0x080049cc

08003dac <_printf_common>:
 8003dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	4616      	mov	r6, r2
 8003db2:	4699      	mov	r9, r3
 8003db4:	688a      	ldr	r2, [r1, #8]
 8003db6:	690b      	ldr	r3, [r1, #16]
 8003db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	bfb8      	it	lt
 8003dc0:	4613      	movlt	r3, r2
 8003dc2:	6033      	str	r3, [r6, #0]
 8003dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dc8:	4607      	mov	r7, r0
 8003dca:	460c      	mov	r4, r1
 8003dcc:	b10a      	cbz	r2, 8003dd2 <_printf_common+0x26>
 8003dce:	3301      	adds	r3, #1
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	0699      	lsls	r1, r3, #26
 8003dd6:	bf42      	ittt	mi
 8003dd8:	6833      	ldrmi	r3, [r6, #0]
 8003dda:	3302      	addmi	r3, #2
 8003ddc:	6033      	strmi	r3, [r6, #0]
 8003dde:	6825      	ldr	r5, [r4, #0]
 8003de0:	f015 0506 	ands.w	r5, r5, #6
 8003de4:	d106      	bne.n	8003df4 <_printf_common+0x48>
 8003de6:	f104 0a19 	add.w	sl, r4, #25
 8003dea:	68e3      	ldr	r3, [r4, #12]
 8003dec:	6832      	ldr	r2, [r6, #0]
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	42ab      	cmp	r3, r5
 8003df2:	dc26      	bgt.n	8003e42 <_printf_common+0x96>
 8003df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003df8:	1e13      	subs	r3, r2, #0
 8003dfa:	6822      	ldr	r2, [r4, #0]
 8003dfc:	bf18      	it	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	0692      	lsls	r2, r2, #26
 8003e02:	d42b      	bmi.n	8003e5c <_printf_common+0xb0>
 8003e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e08:	4649      	mov	r1, r9
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	47c0      	blx	r8
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d01e      	beq.n	8003e50 <_printf_common+0xa4>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	68e5      	ldr	r5, [r4, #12]
 8003e16:	6832      	ldr	r2, [r6, #0]
 8003e18:	f003 0306 	and.w	r3, r3, #6
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	bf08      	it	eq
 8003e20:	1aad      	subeq	r5, r5, r2
 8003e22:	68a3      	ldr	r3, [r4, #8]
 8003e24:	6922      	ldr	r2, [r4, #16]
 8003e26:	bf0c      	ite	eq
 8003e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e2c:	2500      	movne	r5, #0
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	bfc4      	itt	gt
 8003e32:	1a9b      	subgt	r3, r3, r2
 8003e34:	18ed      	addgt	r5, r5, r3
 8003e36:	2600      	movs	r6, #0
 8003e38:	341a      	adds	r4, #26
 8003e3a:	42b5      	cmp	r5, r6
 8003e3c:	d11a      	bne.n	8003e74 <_printf_common+0xc8>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e008      	b.n	8003e54 <_printf_common+0xa8>
 8003e42:	2301      	movs	r3, #1
 8003e44:	4652      	mov	r2, sl
 8003e46:	4649      	mov	r1, r9
 8003e48:	4638      	mov	r0, r7
 8003e4a:	47c0      	blx	r8
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d103      	bne.n	8003e58 <_printf_common+0xac>
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e58:	3501      	adds	r5, #1
 8003e5a:	e7c6      	b.n	8003dea <_printf_common+0x3e>
 8003e5c:	18e1      	adds	r1, r4, r3
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	2030      	movs	r0, #48	; 0x30
 8003e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e66:	4422      	add	r2, r4
 8003e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e70:	3302      	adds	r3, #2
 8003e72:	e7c7      	b.n	8003e04 <_printf_common+0x58>
 8003e74:	2301      	movs	r3, #1
 8003e76:	4622      	mov	r2, r4
 8003e78:	4649      	mov	r1, r9
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	47c0      	blx	r8
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d0e6      	beq.n	8003e50 <_printf_common+0xa4>
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7d9      	b.n	8003e3a <_printf_common+0x8e>
	...

08003e88 <_printf_i>:
 8003e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	4691      	mov	r9, r2
 8003e90:	7e27      	ldrb	r7, [r4, #24]
 8003e92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e94:	2f78      	cmp	r7, #120	; 0x78
 8003e96:	4680      	mov	r8, r0
 8003e98:	469a      	mov	sl, r3
 8003e9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e9e:	d807      	bhi.n	8003eb0 <_printf_i+0x28>
 8003ea0:	2f62      	cmp	r7, #98	; 0x62
 8003ea2:	d80a      	bhi.n	8003eba <_printf_i+0x32>
 8003ea4:	2f00      	cmp	r7, #0
 8003ea6:	f000 80d8 	beq.w	800405a <_printf_i+0x1d2>
 8003eaa:	2f58      	cmp	r7, #88	; 0x58
 8003eac:	f000 80a3 	beq.w	8003ff6 <_printf_i+0x16e>
 8003eb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003eb8:	e03a      	b.n	8003f30 <_printf_i+0xa8>
 8003eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ebe:	2b15      	cmp	r3, #21
 8003ec0:	d8f6      	bhi.n	8003eb0 <_printf_i+0x28>
 8003ec2:	a001      	add	r0, pc, #4	; (adr r0, 8003ec8 <_printf_i+0x40>)
 8003ec4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ec8:	08003f21 	.word	0x08003f21
 8003ecc:	08003f35 	.word	0x08003f35
 8003ed0:	08003eb1 	.word	0x08003eb1
 8003ed4:	08003eb1 	.word	0x08003eb1
 8003ed8:	08003eb1 	.word	0x08003eb1
 8003edc:	08003eb1 	.word	0x08003eb1
 8003ee0:	08003f35 	.word	0x08003f35
 8003ee4:	08003eb1 	.word	0x08003eb1
 8003ee8:	08003eb1 	.word	0x08003eb1
 8003eec:	08003eb1 	.word	0x08003eb1
 8003ef0:	08003eb1 	.word	0x08003eb1
 8003ef4:	08004041 	.word	0x08004041
 8003ef8:	08003f65 	.word	0x08003f65
 8003efc:	08004023 	.word	0x08004023
 8003f00:	08003eb1 	.word	0x08003eb1
 8003f04:	08003eb1 	.word	0x08003eb1
 8003f08:	08004063 	.word	0x08004063
 8003f0c:	08003eb1 	.word	0x08003eb1
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	08003eb1 	.word	0x08003eb1
 8003f18:	08003eb1 	.word	0x08003eb1
 8003f1c:	0800402b 	.word	0x0800402b
 8003f20:	680b      	ldr	r3, [r1, #0]
 8003f22:	1d1a      	adds	r2, r3, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	600a      	str	r2, [r1, #0]
 8003f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0a3      	b.n	800407c <_printf_i+0x1f4>
 8003f34:	6825      	ldr	r5, [r4, #0]
 8003f36:	6808      	ldr	r0, [r1, #0]
 8003f38:	062e      	lsls	r6, r5, #24
 8003f3a:	f100 0304 	add.w	r3, r0, #4
 8003f3e:	d50a      	bpl.n	8003f56 <_printf_i+0xce>
 8003f40:	6805      	ldr	r5, [r0, #0]
 8003f42:	600b      	str	r3, [r1, #0]
 8003f44:	2d00      	cmp	r5, #0
 8003f46:	da03      	bge.n	8003f50 <_printf_i+0xc8>
 8003f48:	232d      	movs	r3, #45	; 0x2d
 8003f4a:	426d      	negs	r5, r5
 8003f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f50:	485e      	ldr	r0, [pc, #376]	; (80040cc <_printf_i+0x244>)
 8003f52:	230a      	movs	r3, #10
 8003f54:	e019      	b.n	8003f8a <_printf_i+0x102>
 8003f56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f5a:	6805      	ldr	r5, [r0, #0]
 8003f5c:	600b      	str	r3, [r1, #0]
 8003f5e:	bf18      	it	ne
 8003f60:	b22d      	sxthne	r5, r5
 8003f62:	e7ef      	b.n	8003f44 <_printf_i+0xbc>
 8003f64:	680b      	ldr	r3, [r1, #0]
 8003f66:	6825      	ldr	r5, [r4, #0]
 8003f68:	1d18      	adds	r0, r3, #4
 8003f6a:	6008      	str	r0, [r1, #0]
 8003f6c:	0628      	lsls	r0, r5, #24
 8003f6e:	d501      	bpl.n	8003f74 <_printf_i+0xec>
 8003f70:	681d      	ldr	r5, [r3, #0]
 8003f72:	e002      	b.n	8003f7a <_printf_i+0xf2>
 8003f74:	0669      	lsls	r1, r5, #25
 8003f76:	d5fb      	bpl.n	8003f70 <_printf_i+0xe8>
 8003f78:	881d      	ldrh	r5, [r3, #0]
 8003f7a:	4854      	ldr	r0, [pc, #336]	; (80040cc <_printf_i+0x244>)
 8003f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003f7e:	bf0c      	ite	eq
 8003f80:	2308      	moveq	r3, #8
 8003f82:	230a      	movne	r3, #10
 8003f84:	2100      	movs	r1, #0
 8003f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f8a:	6866      	ldr	r6, [r4, #4]
 8003f8c:	60a6      	str	r6, [r4, #8]
 8003f8e:	2e00      	cmp	r6, #0
 8003f90:	bfa2      	ittt	ge
 8003f92:	6821      	ldrge	r1, [r4, #0]
 8003f94:	f021 0104 	bicge.w	r1, r1, #4
 8003f98:	6021      	strge	r1, [r4, #0]
 8003f9a:	b90d      	cbnz	r5, 8003fa0 <_printf_i+0x118>
 8003f9c:	2e00      	cmp	r6, #0
 8003f9e:	d04d      	beq.n	800403c <_printf_i+0x1b4>
 8003fa0:	4616      	mov	r6, r2
 8003fa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fa6:	fb03 5711 	mls	r7, r3, r1, r5
 8003faa:	5dc7      	ldrb	r7, [r0, r7]
 8003fac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fb0:	462f      	mov	r7, r5
 8003fb2:	42bb      	cmp	r3, r7
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	d9f4      	bls.n	8003fa2 <_printf_i+0x11a>
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d10b      	bne.n	8003fd4 <_printf_i+0x14c>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	07df      	lsls	r7, r3, #31
 8003fc0:	d508      	bpl.n	8003fd4 <_printf_i+0x14c>
 8003fc2:	6923      	ldr	r3, [r4, #16]
 8003fc4:	6861      	ldr	r1, [r4, #4]
 8003fc6:	4299      	cmp	r1, r3
 8003fc8:	bfde      	ittt	le
 8003fca:	2330      	movle	r3, #48	; 0x30
 8003fcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fd4:	1b92      	subs	r2, r2, r6
 8003fd6:	6122      	str	r2, [r4, #16]
 8003fd8:	f8cd a000 	str.w	sl, [sp]
 8003fdc:	464b      	mov	r3, r9
 8003fde:	aa03      	add	r2, sp, #12
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	f7ff fee2 	bl	8003dac <_printf_common>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d14c      	bne.n	8004086 <_printf_i+0x1fe>
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	b004      	add	sp, #16
 8003ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff6:	4835      	ldr	r0, [pc, #212]	; (80040cc <_printf_i+0x244>)
 8003ff8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ffc:	6823      	ldr	r3, [r4, #0]
 8003ffe:	680e      	ldr	r6, [r1, #0]
 8004000:	061f      	lsls	r7, r3, #24
 8004002:	f856 5b04 	ldr.w	r5, [r6], #4
 8004006:	600e      	str	r6, [r1, #0]
 8004008:	d514      	bpl.n	8004034 <_printf_i+0x1ac>
 800400a:	07d9      	lsls	r1, r3, #31
 800400c:	bf44      	itt	mi
 800400e:	f043 0320 	orrmi.w	r3, r3, #32
 8004012:	6023      	strmi	r3, [r4, #0]
 8004014:	b91d      	cbnz	r5, 800401e <_printf_i+0x196>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	f023 0320 	bic.w	r3, r3, #32
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	2310      	movs	r3, #16
 8004020:	e7b0      	b.n	8003f84 <_printf_i+0xfc>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	f043 0320 	orr.w	r3, r3, #32
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	2378      	movs	r3, #120	; 0x78
 800402c:	4828      	ldr	r0, [pc, #160]	; (80040d0 <_printf_i+0x248>)
 800402e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004032:	e7e3      	b.n	8003ffc <_printf_i+0x174>
 8004034:	065e      	lsls	r6, r3, #25
 8004036:	bf48      	it	mi
 8004038:	b2ad      	uxthmi	r5, r5
 800403a:	e7e6      	b.n	800400a <_printf_i+0x182>
 800403c:	4616      	mov	r6, r2
 800403e:	e7bb      	b.n	8003fb8 <_printf_i+0x130>
 8004040:	680b      	ldr	r3, [r1, #0]
 8004042:	6826      	ldr	r6, [r4, #0]
 8004044:	6960      	ldr	r0, [r4, #20]
 8004046:	1d1d      	adds	r5, r3, #4
 8004048:	600d      	str	r5, [r1, #0]
 800404a:	0635      	lsls	r5, r6, #24
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	d501      	bpl.n	8004054 <_printf_i+0x1cc>
 8004050:	6018      	str	r0, [r3, #0]
 8004052:	e002      	b.n	800405a <_printf_i+0x1d2>
 8004054:	0671      	lsls	r1, r6, #25
 8004056:	d5fb      	bpl.n	8004050 <_printf_i+0x1c8>
 8004058:	8018      	strh	r0, [r3, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	4616      	mov	r6, r2
 8004060:	e7ba      	b.n	8003fd8 <_printf_i+0x150>
 8004062:	680b      	ldr	r3, [r1, #0]
 8004064:	1d1a      	adds	r2, r3, #4
 8004066:	600a      	str	r2, [r1, #0]
 8004068:	681e      	ldr	r6, [r3, #0]
 800406a:	6862      	ldr	r2, [r4, #4]
 800406c:	2100      	movs	r1, #0
 800406e:	4630      	mov	r0, r6
 8004070:	f7fc f8ae 	bl	80001d0 <memchr>
 8004074:	b108      	cbz	r0, 800407a <_printf_i+0x1f2>
 8004076:	1b80      	subs	r0, r0, r6
 8004078:	6060      	str	r0, [r4, #4]
 800407a:	6863      	ldr	r3, [r4, #4]
 800407c:	6123      	str	r3, [r4, #16]
 800407e:	2300      	movs	r3, #0
 8004080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004084:	e7a8      	b.n	8003fd8 <_printf_i+0x150>
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	4632      	mov	r2, r6
 800408a:	4649      	mov	r1, r9
 800408c:	4640      	mov	r0, r8
 800408e:	47d0      	blx	sl
 8004090:	3001      	adds	r0, #1
 8004092:	d0ab      	beq.n	8003fec <_printf_i+0x164>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	079b      	lsls	r3, r3, #30
 8004098:	d413      	bmi.n	80040c2 <_printf_i+0x23a>
 800409a:	68e0      	ldr	r0, [r4, #12]
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	4298      	cmp	r0, r3
 80040a0:	bfb8      	it	lt
 80040a2:	4618      	movlt	r0, r3
 80040a4:	e7a4      	b.n	8003ff0 <_printf_i+0x168>
 80040a6:	2301      	movs	r3, #1
 80040a8:	4632      	mov	r2, r6
 80040aa:	4649      	mov	r1, r9
 80040ac:	4640      	mov	r0, r8
 80040ae:	47d0      	blx	sl
 80040b0:	3001      	adds	r0, #1
 80040b2:	d09b      	beq.n	8003fec <_printf_i+0x164>
 80040b4:	3501      	adds	r5, #1
 80040b6:	68e3      	ldr	r3, [r4, #12]
 80040b8:	9903      	ldr	r1, [sp, #12]
 80040ba:	1a5b      	subs	r3, r3, r1
 80040bc:	42ab      	cmp	r3, r5
 80040be:	dcf2      	bgt.n	80040a6 <_printf_i+0x21e>
 80040c0:	e7eb      	b.n	800409a <_printf_i+0x212>
 80040c2:	2500      	movs	r5, #0
 80040c4:	f104 0619 	add.w	r6, r4, #25
 80040c8:	e7f5      	b.n	80040b6 <_printf_i+0x22e>
 80040ca:	bf00      	nop
 80040cc:	080049d7 	.word	0x080049d7
 80040d0:	080049e8 	.word	0x080049e8

080040d4 <_sbrk_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	4d06      	ldr	r5, [pc, #24]	; (80040f0 <_sbrk_r+0x1c>)
 80040d8:	2300      	movs	r3, #0
 80040da:	4604      	mov	r4, r0
 80040dc:	4608      	mov	r0, r1
 80040de:	602b      	str	r3, [r5, #0]
 80040e0:	f7fd f850 	bl	8001184 <_sbrk>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d102      	bne.n	80040ee <_sbrk_r+0x1a>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	b103      	cbz	r3, 80040ee <_sbrk_r+0x1a>
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	2000012c 	.word	0x2000012c

080040f4 <__swbuf_r>:
 80040f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f6:	460e      	mov	r6, r1
 80040f8:	4614      	mov	r4, r2
 80040fa:	4605      	mov	r5, r0
 80040fc:	b118      	cbz	r0, 8004106 <__swbuf_r+0x12>
 80040fe:	6983      	ldr	r3, [r0, #24]
 8004100:	b90b      	cbnz	r3, 8004106 <__swbuf_r+0x12>
 8004102:	f000 f9d9 	bl	80044b8 <__sinit>
 8004106:	4b21      	ldr	r3, [pc, #132]	; (800418c <__swbuf_r+0x98>)
 8004108:	429c      	cmp	r4, r3
 800410a:	d12b      	bne.n	8004164 <__swbuf_r+0x70>
 800410c:	686c      	ldr	r4, [r5, #4]
 800410e:	69a3      	ldr	r3, [r4, #24]
 8004110:	60a3      	str	r3, [r4, #8]
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	071a      	lsls	r2, r3, #28
 8004116:	d52f      	bpl.n	8004178 <__swbuf_r+0x84>
 8004118:	6923      	ldr	r3, [r4, #16]
 800411a:	b36b      	cbz	r3, 8004178 <__swbuf_r+0x84>
 800411c:	6923      	ldr	r3, [r4, #16]
 800411e:	6820      	ldr	r0, [r4, #0]
 8004120:	1ac0      	subs	r0, r0, r3
 8004122:	6963      	ldr	r3, [r4, #20]
 8004124:	b2f6      	uxtb	r6, r6
 8004126:	4283      	cmp	r3, r0
 8004128:	4637      	mov	r7, r6
 800412a:	dc04      	bgt.n	8004136 <__swbuf_r+0x42>
 800412c:	4621      	mov	r1, r4
 800412e:	4628      	mov	r0, r5
 8004130:	f000 f92e 	bl	8004390 <_fflush_r>
 8004134:	bb30      	cbnz	r0, 8004184 <__swbuf_r+0x90>
 8004136:	68a3      	ldr	r3, [r4, #8]
 8004138:	3b01      	subs	r3, #1
 800413a:	60a3      	str	r3, [r4, #8]
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	6022      	str	r2, [r4, #0]
 8004142:	701e      	strb	r6, [r3, #0]
 8004144:	6963      	ldr	r3, [r4, #20]
 8004146:	3001      	adds	r0, #1
 8004148:	4283      	cmp	r3, r0
 800414a:	d004      	beq.n	8004156 <__swbuf_r+0x62>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	07db      	lsls	r3, r3, #31
 8004150:	d506      	bpl.n	8004160 <__swbuf_r+0x6c>
 8004152:	2e0a      	cmp	r6, #10
 8004154:	d104      	bne.n	8004160 <__swbuf_r+0x6c>
 8004156:	4621      	mov	r1, r4
 8004158:	4628      	mov	r0, r5
 800415a:	f000 f919 	bl	8004390 <_fflush_r>
 800415e:	b988      	cbnz	r0, 8004184 <__swbuf_r+0x90>
 8004160:	4638      	mov	r0, r7
 8004162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <__swbuf_r+0x9c>)
 8004166:	429c      	cmp	r4, r3
 8004168:	d101      	bne.n	800416e <__swbuf_r+0x7a>
 800416a:	68ac      	ldr	r4, [r5, #8]
 800416c:	e7cf      	b.n	800410e <__swbuf_r+0x1a>
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <__swbuf_r+0xa0>)
 8004170:	429c      	cmp	r4, r3
 8004172:	bf08      	it	eq
 8004174:	68ec      	ldreq	r4, [r5, #12]
 8004176:	e7ca      	b.n	800410e <__swbuf_r+0x1a>
 8004178:	4621      	mov	r1, r4
 800417a:	4628      	mov	r0, r5
 800417c:	f000 f80c 	bl	8004198 <__swsetup_r>
 8004180:	2800      	cmp	r0, #0
 8004182:	d0cb      	beq.n	800411c <__swbuf_r+0x28>
 8004184:	f04f 37ff 	mov.w	r7, #4294967295
 8004188:	e7ea      	b.n	8004160 <__swbuf_r+0x6c>
 800418a:	bf00      	nop
 800418c:	08004a1c 	.word	0x08004a1c
 8004190:	08004a3c 	.word	0x08004a3c
 8004194:	080049fc 	.word	0x080049fc

08004198 <__swsetup_r>:
 8004198:	4b32      	ldr	r3, [pc, #200]	; (8004264 <__swsetup_r+0xcc>)
 800419a:	b570      	push	{r4, r5, r6, lr}
 800419c:	681d      	ldr	r5, [r3, #0]
 800419e:	4606      	mov	r6, r0
 80041a0:	460c      	mov	r4, r1
 80041a2:	b125      	cbz	r5, 80041ae <__swsetup_r+0x16>
 80041a4:	69ab      	ldr	r3, [r5, #24]
 80041a6:	b913      	cbnz	r3, 80041ae <__swsetup_r+0x16>
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 f985 	bl	80044b8 <__sinit>
 80041ae:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <__swsetup_r+0xd0>)
 80041b0:	429c      	cmp	r4, r3
 80041b2:	d10f      	bne.n	80041d4 <__swsetup_r+0x3c>
 80041b4:	686c      	ldr	r4, [r5, #4]
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041bc:	0719      	lsls	r1, r3, #28
 80041be:	d42c      	bmi.n	800421a <__swsetup_r+0x82>
 80041c0:	06dd      	lsls	r5, r3, #27
 80041c2:	d411      	bmi.n	80041e8 <__swsetup_r+0x50>
 80041c4:	2309      	movs	r3, #9
 80041c6:	6033      	str	r3, [r6, #0]
 80041c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041cc:	81a3      	strh	r3, [r4, #12]
 80041ce:	f04f 30ff 	mov.w	r0, #4294967295
 80041d2:	e03e      	b.n	8004252 <__swsetup_r+0xba>
 80041d4:	4b25      	ldr	r3, [pc, #148]	; (800426c <__swsetup_r+0xd4>)
 80041d6:	429c      	cmp	r4, r3
 80041d8:	d101      	bne.n	80041de <__swsetup_r+0x46>
 80041da:	68ac      	ldr	r4, [r5, #8]
 80041dc:	e7eb      	b.n	80041b6 <__swsetup_r+0x1e>
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <__swsetup_r+0xd8>)
 80041e0:	429c      	cmp	r4, r3
 80041e2:	bf08      	it	eq
 80041e4:	68ec      	ldreq	r4, [r5, #12]
 80041e6:	e7e6      	b.n	80041b6 <__swsetup_r+0x1e>
 80041e8:	0758      	lsls	r0, r3, #29
 80041ea:	d512      	bpl.n	8004212 <__swsetup_r+0x7a>
 80041ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ee:	b141      	cbz	r1, 8004202 <__swsetup_r+0x6a>
 80041f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041f4:	4299      	cmp	r1, r3
 80041f6:	d002      	beq.n	80041fe <__swsetup_r+0x66>
 80041f8:	4630      	mov	r0, r6
 80041fa:	f7ff fbd3 	bl	80039a4 <_free_r>
 80041fe:	2300      	movs	r3, #0
 8004200:	6363      	str	r3, [r4, #52]	; 0x34
 8004202:	89a3      	ldrh	r3, [r4, #12]
 8004204:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004208:	81a3      	strh	r3, [r4, #12]
 800420a:	2300      	movs	r3, #0
 800420c:	6063      	str	r3, [r4, #4]
 800420e:	6923      	ldr	r3, [r4, #16]
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	f043 0308 	orr.w	r3, r3, #8
 8004218:	81a3      	strh	r3, [r4, #12]
 800421a:	6923      	ldr	r3, [r4, #16]
 800421c:	b94b      	cbnz	r3, 8004232 <__swsetup_r+0x9a>
 800421e:	89a3      	ldrh	r3, [r4, #12]
 8004220:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004228:	d003      	beq.n	8004232 <__swsetup_r+0x9a>
 800422a:	4621      	mov	r1, r4
 800422c:	4630      	mov	r0, r6
 800422e:	f000 fa07 	bl	8004640 <__smakebuf_r>
 8004232:	89a0      	ldrh	r0, [r4, #12]
 8004234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004238:	f010 0301 	ands.w	r3, r0, #1
 800423c:	d00a      	beq.n	8004254 <__swsetup_r+0xbc>
 800423e:	2300      	movs	r3, #0
 8004240:	60a3      	str	r3, [r4, #8]
 8004242:	6963      	ldr	r3, [r4, #20]
 8004244:	425b      	negs	r3, r3
 8004246:	61a3      	str	r3, [r4, #24]
 8004248:	6923      	ldr	r3, [r4, #16]
 800424a:	b943      	cbnz	r3, 800425e <__swsetup_r+0xc6>
 800424c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004250:	d1ba      	bne.n	80041c8 <__swsetup_r+0x30>
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	0781      	lsls	r1, r0, #30
 8004256:	bf58      	it	pl
 8004258:	6963      	ldrpl	r3, [r4, #20]
 800425a:	60a3      	str	r3, [r4, #8]
 800425c:	e7f4      	b.n	8004248 <__swsetup_r+0xb0>
 800425e:	2000      	movs	r0, #0
 8004260:	e7f7      	b.n	8004252 <__swsetup_r+0xba>
 8004262:	bf00      	nop
 8004264:	20000014 	.word	0x20000014
 8004268:	08004a1c 	.word	0x08004a1c
 800426c:	08004a3c 	.word	0x08004a3c
 8004270:	080049fc 	.word	0x080049fc

08004274 <abort>:
 8004274:	b508      	push	{r3, lr}
 8004276:	2006      	movs	r0, #6
 8004278:	f000 fa56 	bl	8004728 <raise>
 800427c:	2001      	movs	r0, #1
 800427e:	f7fc ff09 	bl	8001094 <_exit>
	...

08004284 <__sflush_r>:
 8004284:	898a      	ldrh	r2, [r1, #12]
 8004286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800428a:	4605      	mov	r5, r0
 800428c:	0710      	lsls	r0, r2, #28
 800428e:	460c      	mov	r4, r1
 8004290:	d458      	bmi.n	8004344 <__sflush_r+0xc0>
 8004292:	684b      	ldr	r3, [r1, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	dc05      	bgt.n	80042a4 <__sflush_r+0x20>
 8004298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	dc02      	bgt.n	80042a4 <__sflush_r+0x20>
 800429e:	2000      	movs	r0, #0
 80042a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042a6:	2e00      	cmp	r6, #0
 80042a8:	d0f9      	beq.n	800429e <__sflush_r+0x1a>
 80042aa:	2300      	movs	r3, #0
 80042ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042b0:	682f      	ldr	r7, [r5, #0]
 80042b2:	602b      	str	r3, [r5, #0]
 80042b4:	d032      	beq.n	800431c <__sflush_r+0x98>
 80042b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	075a      	lsls	r2, r3, #29
 80042bc:	d505      	bpl.n	80042ca <__sflush_r+0x46>
 80042be:	6863      	ldr	r3, [r4, #4]
 80042c0:	1ac0      	subs	r0, r0, r3
 80042c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042c4:	b10b      	cbz	r3, 80042ca <__sflush_r+0x46>
 80042c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042c8:	1ac0      	subs	r0, r0, r3
 80042ca:	2300      	movs	r3, #0
 80042cc:	4602      	mov	r2, r0
 80042ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042d0:	6a21      	ldr	r1, [r4, #32]
 80042d2:	4628      	mov	r0, r5
 80042d4:	47b0      	blx	r6
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	89a3      	ldrh	r3, [r4, #12]
 80042da:	d106      	bne.n	80042ea <__sflush_r+0x66>
 80042dc:	6829      	ldr	r1, [r5, #0]
 80042de:	291d      	cmp	r1, #29
 80042e0:	d82c      	bhi.n	800433c <__sflush_r+0xb8>
 80042e2:	4a2a      	ldr	r2, [pc, #168]	; (800438c <__sflush_r+0x108>)
 80042e4:	40ca      	lsrs	r2, r1
 80042e6:	07d6      	lsls	r6, r2, #31
 80042e8:	d528      	bpl.n	800433c <__sflush_r+0xb8>
 80042ea:	2200      	movs	r2, #0
 80042ec:	6062      	str	r2, [r4, #4]
 80042ee:	04d9      	lsls	r1, r3, #19
 80042f0:	6922      	ldr	r2, [r4, #16]
 80042f2:	6022      	str	r2, [r4, #0]
 80042f4:	d504      	bpl.n	8004300 <__sflush_r+0x7c>
 80042f6:	1c42      	adds	r2, r0, #1
 80042f8:	d101      	bne.n	80042fe <__sflush_r+0x7a>
 80042fa:	682b      	ldr	r3, [r5, #0]
 80042fc:	b903      	cbnz	r3, 8004300 <__sflush_r+0x7c>
 80042fe:	6560      	str	r0, [r4, #84]	; 0x54
 8004300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004302:	602f      	str	r7, [r5, #0]
 8004304:	2900      	cmp	r1, #0
 8004306:	d0ca      	beq.n	800429e <__sflush_r+0x1a>
 8004308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800430c:	4299      	cmp	r1, r3
 800430e:	d002      	beq.n	8004316 <__sflush_r+0x92>
 8004310:	4628      	mov	r0, r5
 8004312:	f7ff fb47 	bl	80039a4 <_free_r>
 8004316:	2000      	movs	r0, #0
 8004318:	6360      	str	r0, [r4, #52]	; 0x34
 800431a:	e7c1      	b.n	80042a0 <__sflush_r+0x1c>
 800431c:	6a21      	ldr	r1, [r4, #32]
 800431e:	2301      	movs	r3, #1
 8004320:	4628      	mov	r0, r5
 8004322:	47b0      	blx	r6
 8004324:	1c41      	adds	r1, r0, #1
 8004326:	d1c7      	bne.n	80042b8 <__sflush_r+0x34>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0c4      	beq.n	80042b8 <__sflush_r+0x34>
 800432e:	2b1d      	cmp	r3, #29
 8004330:	d001      	beq.n	8004336 <__sflush_r+0xb2>
 8004332:	2b16      	cmp	r3, #22
 8004334:	d101      	bne.n	800433a <__sflush_r+0xb6>
 8004336:	602f      	str	r7, [r5, #0]
 8004338:	e7b1      	b.n	800429e <__sflush_r+0x1a>
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004340:	81a3      	strh	r3, [r4, #12]
 8004342:	e7ad      	b.n	80042a0 <__sflush_r+0x1c>
 8004344:	690f      	ldr	r7, [r1, #16]
 8004346:	2f00      	cmp	r7, #0
 8004348:	d0a9      	beq.n	800429e <__sflush_r+0x1a>
 800434a:	0793      	lsls	r3, r2, #30
 800434c:	680e      	ldr	r6, [r1, #0]
 800434e:	bf08      	it	eq
 8004350:	694b      	ldreq	r3, [r1, #20]
 8004352:	600f      	str	r7, [r1, #0]
 8004354:	bf18      	it	ne
 8004356:	2300      	movne	r3, #0
 8004358:	eba6 0807 	sub.w	r8, r6, r7
 800435c:	608b      	str	r3, [r1, #8]
 800435e:	f1b8 0f00 	cmp.w	r8, #0
 8004362:	dd9c      	ble.n	800429e <__sflush_r+0x1a>
 8004364:	6a21      	ldr	r1, [r4, #32]
 8004366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004368:	4643      	mov	r3, r8
 800436a:	463a      	mov	r2, r7
 800436c:	4628      	mov	r0, r5
 800436e:	47b0      	blx	r6
 8004370:	2800      	cmp	r0, #0
 8004372:	dc06      	bgt.n	8004382 <__sflush_r+0xfe>
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800437a:	81a3      	strh	r3, [r4, #12]
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	e78e      	b.n	80042a0 <__sflush_r+0x1c>
 8004382:	4407      	add	r7, r0
 8004384:	eba8 0800 	sub.w	r8, r8, r0
 8004388:	e7e9      	b.n	800435e <__sflush_r+0xda>
 800438a:	bf00      	nop
 800438c:	20400001 	.word	0x20400001

08004390 <_fflush_r>:
 8004390:	b538      	push	{r3, r4, r5, lr}
 8004392:	690b      	ldr	r3, [r1, #16]
 8004394:	4605      	mov	r5, r0
 8004396:	460c      	mov	r4, r1
 8004398:	b913      	cbnz	r3, 80043a0 <_fflush_r+0x10>
 800439a:	2500      	movs	r5, #0
 800439c:	4628      	mov	r0, r5
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	b118      	cbz	r0, 80043aa <_fflush_r+0x1a>
 80043a2:	6983      	ldr	r3, [r0, #24]
 80043a4:	b90b      	cbnz	r3, 80043aa <_fflush_r+0x1a>
 80043a6:	f000 f887 	bl	80044b8 <__sinit>
 80043aa:	4b14      	ldr	r3, [pc, #80]	; (80043fc <_fflush_r+0x6c>)
 80043ac:	429c      	cmp	r4, r3
 80043ae:	d11b      	bne.n	80043e8 <_fflush_r+0x58>
 80043b0:	686c      	ldr	r4, [r5, #4]
 80043b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0ef      	beq.n	800439a <_fflush_r+0xa>
 80043ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043bc:	07d0      	lsls	r0, r2, #31
 80043be:	d404      	bmi.n	80043ca <_fflush_r+0x3a>
 80043c0:	0599      	lsls	r1, r3, #22
 80043c2:	d402      	bmi.n	80043ca <_fflush_r+0x3a>
 80043c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043c6:	f000 f915 	bl	80045f4 <__retarget_lock_acquire_recursive>
 80043ca:	4628      	mov	r0, r5
 80043cc:	4621      	mov	r1, r4
 80043ce:	f7ff ff59 	bl	8004284 <__sflush_r>
 80043d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043d4:	07da      	lsls	r2, r3, #31
 80043d6:	4605      	mov	r5, r0
 80043d8:	d4e0      	bmi.n	800439c <_fflush_r+0xc>
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	059b      	lsls	r3, r3, #22
 80043de:	d4dd      	bmi.n	800439c <_fflush_r+0xc>
 80043e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043e2:	f000 f908 	bl	80045f6 <__retarget_lock_release_recursive>
 80043e6:	e7d9      	b.n	800439c <_fflush_r+0xc>
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <_fflush_r+0x70>)
 80043ea:	429c      	cmp	r4, r3
 80043ec:	d101      	bne.n	80043f2 <_fflush_r+0x62>
 80043ee:	68ac      	ldr	r4, [r5, #8]
 80043f0:	e7df      	b.n	80043b2 <_fflush_r+0x22>
 80043f2:	4b04      	ldr	r3, [pc, #16]	; (8004404 <_fflush_r+0x74>)
 80043f4:	429c      	cmp	r4, r3
 80043f6:	bf08      	it	eq
 80043f8:	68ec      	ldreq	r4, [r5, #12]
 80043fa:	e7da      	b.n	80043b2 <_fflush_r+0x22>
 80043fc:	08004a1c 	.word	0x08004a1c
 8004400:	08004a3c 	.word	0x08004a3c
 8004404:	080049fc 	.word	0x080049fc

08004408 <std>:
 8004408:	2300      	movs	r3, #0
 800440a:	b510      	push	{r4, lr}
 800440c:	4604      	mov	r4, r0
 800440e:	e9c0 3300 	strd	r3, r3, [r0]
 8004412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004416:	6083      	str	r3, [r0, #8]
 8004418:	8181      	strh	r1, [r0, #12]
 800441a:	6643      	str	r3, [r0, #100]	; 0x64
 800441c:	81c2      	strh	r2, [r0, #14]
 800441e:	6183      	str	r3, [r0, #24]
 8004420:	4619      	mov	r1, r3
 8004422:	2208      	movs	r2, #8
 8004424:	305c      	adds	r0, #92	; 0x5c
 8004426:	f7ff fa3d 	bl	80038a4 <memset>
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <std+0x38>)
 800442c:	6263      	str	r3, [r4, #36]	; 0x24
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <std+0x3c>)
 8004430:	62a3      	str	r3, [r4, #40]	; 0x28
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <std+0x40>)
 8004434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <std+0x44>)
 8004438:	6224      	str	r4, [r4, #32]
 800443a:	6323      	str	r3, [r4, #48]	; 0x30
 800443c:	bd10      	pop	{r4, pc}
 800443e:	bf00      	nop
 8004440:	08004761 	.word	0x08004761
 8004444:	08004783 	.word	0x08004783
 8004448:	080047bb 	.word	0x080047bb
 800444c:	080047df 	.word	0x080047df

08004450 <_cleanup_r>:
 8004450:	4901      	ldr	r1, [pc, #4]	; (8004458 <_cleanup_r+0x8>)
 8004452:	f000 b8af 	b.w	80045b4 <_fwalk_reent>
 8004456:	bf00      	nop
 8004458:	08004391 	.word	0x08004391

0800445c <__sfmoreglue>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	1e4a      	subs	r2, r1, #1
 8004460:	2568      	movs	r5, #104	; 0x68
 8004462:	4355      	muls	r5, r2
 8004464:	460e      	mov	r6, r1
 8004466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800446a:	f7ff faeb 	bl	8003a44 <_malloc_r>
 800446e:	4604      	mov	r4, r0
 8004470:	b140      	cbz	r0, 8004484 <__sfmoreglue+0x28>
 8004472:	2100      	movs	r1, #0
 8004474:	e9c0 1600 	strd	r1, r6, [r0]
 8004478:	300c      	adds	r0, #12
 800447a:	60a0      	str	r0, [r4, #8]
 800447c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004480:	f7ff fa10 	bl	80038a4 <memset>
 8004484:	4620      	mov	r0, r4
 8004486:	bd70      	pop	{r4, r5, r6, pc}

08004488 <__sfp_lock_acquire>:
 8004488:	4801      	ldr	r0, [pc, #4]	; (8004490 <__sfp_lock_acquire+0x8>)
 800448a:	f000 b8b3 	b.w	80045f4 <__retarget_lock_acquire_recursive>
 800448e:	bf00      	nop
 8004490:	20000128 	.word	0x20000128

08004494 <__sfp_lock_release>:
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <__sfp_lock_release+0x8>)
 8004496:	f000 b8ae 	b.w	80045f6 <__retarget_lock_release_recursive>
 800449a:	bf00      	nop
 800449c:	20000128 	.word	0x20000128

080044a0 <__sinit_lock_acquire>:
 80044a0:	4801      	ldr	r0, [pc, #4]	; (80044a8 <__sinit_lock_acquire+0x8>)
 80044a2:	f000 b8a7 	b.w	80045f4 <__retarget_lock_acquire_recursive>
 80044a6:	bf00      	nop
 80044a8:	20000123 	.word	0x20000123

080044ac <__sinit_lock_release>:
 80044ac:	4801      	ldr	r0, [pc, #4]	; (80044b4 <__sinit_lock_release+0x8>)
 80044ae:	f000 b8a2 	b.w	80045f6 <__retarget_lock_release_recursive>
 80044b2:	bf00      	nop
 80044b4:	20000123 	.word	0x20000123

080044b8 <__sinit>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4604      	mov	r4, r0
 80044bc:	f7ff fff0 	bl	80044a0 <__sinit_lock_acquire>
 80044c0:	69a3      	ldr	r3, [r4, #24]
 80044c2:	b11b      	cbz	r3, 80044cc <__sinit+0x14>
 80044c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c8:	f7ff bff0 	b.w	80044ac <__sinit_lock_release>
 80044cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044d0:	6523      	str	r3, [r4, #80]	; 0x50
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <__sinit+0x68>)
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <__sinit+0x6c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80044da:	42a3      	cmp	r3, r4
 80044dc:	bf04      	itt	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	61a3      	streq	r3, [r4, #24]
 80044e2:	4620      	mov	r0, r4
 80044e4:	f000 f820 	bl	8004528 <__sfp>
 80044e8:	6060      	str	r0, [r4, #4]
 80044ea:	4620      	mov	r0, r4
 80044ec:	f000 f81c 	bl	8004528 <__sfp>
 80044f0:	60a0      	str	r0, [r4, #8]
 80044f2:	4620      	mov	r0, r4
 80044f4:	f000 f818 	bl	8004528 <__sfp>
 80044f8:	2200      	movs	r2, #0
 80044fa:	60e0      	str	r0, [r4, #12]
 80044fc:	2104      	movs	r1, #4
 80044fe:	6860      	ldr	r0, [r4, #4]
 8004500:	f7ff ff82 	bl	8004408 <std>
 8004504:	68a0      	ldr	r0, [r4, #8]
 8004506:	2201      	movs	r2, #1
 8004508:	2109      	movs	r1, #9
 800450a:	f7ff ff7d 	bl	8004408 <std>
 800450e:	68e0      	ldr	r0, [r4, #12]
 8004510:	2202      	movs	r2, #2
 8004512:	2112      	movs	r1, #18
 8004514:	f7ff ff78 	bl	8004408 <std>
 8004518:	2301      	movs	r3, #1
 800451a:	61a3      	str	r3, [r4, #24]
 800451c:	e7d2      	b.n	80044c4 <__sinit+0xc>
 800451e:	bf00      	nop
 8004520:	08004910 	.word	0x08004910
 8004524:	08004451 	.word	0x08004451

08004528 <__sfp>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	4607      	mov	r7, r0
 800452c:	f7ff ffac 	bl	8004488 <__sfp_lock_acquire>
 8004530:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <__sfp+0x84>)
 8004532:	681e      	ldr	r6, [r3, #0]
 8004534:	69b3      	ldr	r3, [r6, #24]
 8004536:	b913      	cbnz	r3, 800453e <__sfp+0x16>
 8004538:	4630      	mov	r0, r6
 800453a:	f7ff ffbd 	bl	80044b8 <__sinit>
 800453e:	3648      	adds	r6, #72	; 0x48
 8004540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004544:	3b01      	subs	r3, #1
 8004546:	d503      	bpl.n	8004550 <__sfp+0x28>
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	b30b      	cbz	r3, 8004590 <__sfp+0x68>
 800454c:	6836      	ldr	r6, [r6, #0]
 800454e:	e7f7      	b.n	8004540 <__sfp+0x18>
 8004550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004554:	b9d5      	cbnz	r5, 800458c <__sfp+0x64>
 8004556:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <__sfp+0x88>)
 8004558:	60e3      	str	r3, [r4, #12]
 800455a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800455e:	6665      	str	r5, [r4, #100]	; 0x64
 8004560:	f000 f847 	bl	80045f2 <__retarget_lock_init_recursive>
 8004564:	f7ff ff96 	bl	8004494 <__sfp_lock_release>
 8004568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800456c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004570:	6025      	str	r5, [r4, #0]
 8004572:	61a5      	str	r5, [r4, #24]
 8004574:	2208      	movs	r2, #8
 8004576:	4629      	mov	r1, r5
 8004578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800457c:	f7ff f992 	bl	80038a4 <memset>
 8004580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004588:	4620      	mov	r0, r4
 800458a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800458c:	3468      	adds	r4, #104	; 0x68
 800458e:	e7d9      	b.n	8004544 <__sfp+0x1c>
 8004590:	2104      	movs	r1, #4
 8004592:	4638      	mov	r0, r7
 8004594:	f7ff ff62 	bl	800445c <__sfmoreglue>
 8004598:	4604      	mov	r4, r0
 800459a:	6030      	str	r0, [r6, #0]
 800459c:	2800      	cmp	r0, #0
 800459e:	d1d5      	bne.n	800454c <__sfp+0x24>
 80045a0:	f7ff ff78 	bl	8004494 <__sfp_lock_release>
 80045a4:	230c      	movs	r3, #12
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	e7ee      	b.n	8004588 <__sfp+0x60>
 80045aa:	bf00      	nop
 80045ac:	08004910 	.word	0x08004910
 80045b0:	ffff0001 	.word	0xffff0001

080045b4 <_fwalk_reent>:
 80045b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b8:	4606      	mov	r6, r0
 80045ba:	4688      	mov	r8, r1
 80045bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045c0:	2700      	movs	r7, #0
 80045c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045c6:	f1b9 0901 	subs.w	r9, r9, #1
 80045ca:	d505      	bpl.n	80045d8 <_fwalk_reent+0x24>
 80045cc:	6824      	ldr	r4, [r4, #0]
 80045ce:	2c00      	cmp	r4, #0
 80045d0:	d1f7      	bne.n	80045c2 <_fwalk_reent+0xe>
 80045d2:	4638      	mov	r0, r7
 80045d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045d8:	89ab      	ldrh	r3, [r5, #12]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d907      	bls.n	80045ee <_fwalk_reent+0x3a>
 80045de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045e2:	3301      	adds	r3, #1
 80045e4:	d003      	beq.n	80045ee <_fwalk_reent+0x3a>
 80045e6:	4629      	mov	r1, r5
 80045e8:	4630      	mov	r0, r6
 80045ea:	47c0      	blx	r8
 80045ec:	4307      	orrs	r7, r0
 80045ee:	3568      	adds	r5, #104	; 0x68
 80045f0:	e7e9      	b.n	80045c6 <_fwalk_reent+0x12>

080045f2 <__retarget_lock_init_recursive>:
 80045f2:	4770      	bx	lr

080045f4 <__retarget_lock_acquire_recursive>:
 80045f4:	4770      	bx	lr

080045f6 <__retarget_lock_release_recursive>:
 80045f6:	4770      	bx	lr

080045f8 <__swhatbuf_r>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	460e      	mov	r6, r1
 80045fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004600:	2900      	cmp	r1, #0
 8004602:	b096      	sub	sp, #88	; 0x58
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	da07      	bge.n	800461a <__swhatbuf_r+0x22>
 800460a:	2300      	movs	r3, #0
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	89b3      	ldrh	r3, [r6, #12]
 8004610:	061a      	lsls	r2, r3, #24
 8004612:	d410      	bmi.n	8004636 <__swhatbuf_r+0x3e>
 8004614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004618:	e00e      	b.n	8004638 <__swhatbuf_r+0x40>
 800461a:	466a      	mov	r2, sp
 800461c:	f000 f906 	bl	800482c <_fstat_r>
 8004620:	2800      	cmp	r0, #0
 8004622:	dbf2      	blt.n	800460a <__swhatbuf_r+0x12>
 8004624:	9a01      	ldr	r2, [sp, #4]
 8004626:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800462a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800462e:	425a      	negs	r2, r3
 8004630:	415a      	adcs	r2, r3
 8004632:	602a      	str	r2, [r5, #0]
 8004634:	e7ee      	b.n	8004614 <__swhatbuf_r+0x1c>
 8004636:	2340      	movs	r3, #64	; 0x40
 8004638:	2000      	movs	r0, #0
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	b016      	add	sp, #88	; 0x58
 800463e:	bd70      	pop	{r4, r5, r6, pc}

08004640 <__smakebuf_r>:
 8004640:	898b      	ldrh	r3, [r1, #12]
 8004642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004644:	079d      	lsls	r5, r3, #30
 8004646:	4606      	mov	r6, r0
 8004648:	460c      	mov	r4, r1
 800464a:	d507      	bpl.n	800465c <__smakebuf_r+0x1c>
 800464c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004650:	6023      	str	r3, [r4, #0]
 8004652:	6123      	str	r3, [r4, #16]
 8004654:	2301      	movs	r3, #1
 8004656:	6163      	str	r3, [r4, #20]
 8004658:	b002      	add	sp, #8
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	ab01      	add	r3, sp, #4
 800465e:	466a      	mov	r2, sp
 8004660:	f7ff ffca 	bl	80045f8 <__swhatbuf_r>
 8004664:	9900      	ldr	r1, [sp, #0]
 8004666:	4605      	mov	r5, r0
 8004668:	4630      	mov	r0, r6
 800466a:	f7ff f9eb 	bl	8003a44 <_malloc_r>
 800466e:	b948      	cbnz	r0, 8004684 <__smakebuf_r+0x44>
 8004670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004674:	059a      	lsls	r2, r3, #22
 8004676:	d4ef      	bmi.n	8004658 <__smakebuf_r+0x18>
 8004678:	f023 0303 	bic.w	r3, r3, #3
 800467c:	f043 0302 	orr.w	r3, r3, #2
 8004680:	81a3      	strh	r3, [r4, #12]
 8004682:	e7e3      	b.n	800464c <__smakebuf_r+0xc>
 8004684:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <__smakebuf_r+0x7c>)
 8004686:	62b3      	str	r3, [r6, #40]	; 0x28
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	6020      	str	r0, [r4, #0]
 800468c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004690:	81a3      	strh	r3, [r4, #12]
 8004692:	9b00      	ldr	r3, [sp, #0]
 8004694:	6163      	str	r3, [r4, #20]
 8004696:	9b01      	ldr	r3, [sp, #4]
 8004698:	6120      	str	r0, [r4, #16]
 800469a:	b15b      	cbz	r3, 80046b4 <__smakebuf_r+0x74>
 800469c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046a0:	4630      	mov	r0, r6
 80046a2:	f000 f8d5 	bl	8004850 <_isatty_r>
 80046a6:	b128      	cbz	r0, 80046b4 <__smakebuf_r+0x74>
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	f023 0303 	bic.w	r3, r3, #3
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	89a0      	ldrh	r0, [r4, #12]
 80046b6:	4305      	orrs	r5, r0
 80046b8:	81a5      	strh	r5, [r4, #12]
 80046ba:	e7cd      	b.n	8004658 <__smakebuf_r+0x18>
 80046bc:	08004451 	.word	0x08004451

080046c0 <__malloc_lock>:
 80046c0:	4801      	ldr	r0, [pc, #4]	; (80046c8 <__malloc_lock+0x8>)
 80046c2:	f7ff bf97 	b.w	80045f4 <__retarget_lock_acquire_recursive>
 80046c6:	bf00      	nop
 80046c8:	20000124 	.word	0x20000124

080046cc <__malloc_unlock>:
 80046cc:	4801      	ldr	r0, [pc, #4]	; (80046d4 <__malloc_unlock+0x8>)
 80046ce:	f7ff bf92 	b.w	80045f6 <__retarget_lock_release_recursive>
 80046d2:	bf00      	nop
 80046d4:	20000124 	.word	0x20000124

080046d8 <_raise_r>:
 80046d8:	291f      	cmp	r1, #31
 80046da:	b538      	push	{r3, r4, r5, lr}
 80046dc:	4604      	mov	r4, r0
 80046de:	460d      	mov	r5, r1
 80046e0:	d904      	bls.n	80046ec <_raise_r+0x14>
 80046e2:	2316      	movs	r3, #22
 80046e4:	6003      	str	r3, [r0, #0]
 80046e6:	f04f 30ff 	mov.w	r0, #4294967295
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80046ee:	b112      	cbz	r2, 80046f6 <_raise_r+0x1e>
 80046f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80046f4:	b94b      	cbnz	r3, 800470a <_raise_r+0x32>
 80046f6:	4620      	mov	r0, r4
 80046f8:	f000 f830 	bl	800475c <_getpid_r>
 80046fc:	462a      	mov	r2, r5
 80046fe:	4601      	mov	r1, r0
 8004700:	4620      	mov	r0, r4
 8004702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004706:	f000 b817 	b.w	8004738 <_kill_r>
 800470a:	2b01      	cmp	r3, #1
 800470c:	d00a      	beq.n	8004724 <_raise_r+0x4c>
 800470e:	1c59      	adds	r1, r3, #1
 8004710:	d103      	bne.n	800471a <_raise_r+0x42>
 8004712:	2316      	movs	r3, #22
 8004714:	6003      	str	r3, [r0, #0]
 8004716:	2001      	movs	r0, #1
 8004718:	e7e7      	b.n	80046ea <_raise_r+0x12>
 800471a:	2400      	movs	r4, #0
 800471c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004720:	4628      	mov	r0, r5
 8004722:	4798      	blx	r3
 8004724:	2000      	movs	r0, #0
 8004726:	e7e0      	b.n	80046ea <_raise_r+0x12>

08004728 <raise>:
 8004728:	4b02      	ldr	r3, [pc, #8]	; (8004734 <raise+0xc>)
 800472a:	4601      	mov	r1, r0
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	f7ff bfd3 	b.w	80046d8 <_raise_r>
 8004732:	bf00      	nop
 8004734:	20000014 	.word	0x20000014

08004738 <_kill_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4d07      	ldr	r5, [pc, #28]	; (8004758 <_kill_r+0x20>)
 800473c:	2300      	movs	r3, #0
 800473e:	4604      	mov	r4, r0
 8004740:	4608      	mov	r0, r1
 8004742:	4611      	mov	r1, r2
 8004744:	602b      	str	r3, [r5, #0]
 8004746:	f7fc fc95 	bl	8001074 <_kill>
 800474a:	1c43      	adds	r3, r0, #1
 800474c:	d102      	bne.n	8004754 <_kill_r+0x1c>
 800474e:	682b      	ldr	r3, [r5, #0]
 8004750:	b103      	cbz	r3, 8004754 <_kill_r+0x1c>
 8004752:	6023      	str	r3, [r4, #0]
 8004754:	bd38      	pop	{r3, r4, r5, pc}
 8004756:	bf00      	nop
 8004758:	2000012c 	.word	0x2000012c

0800475c <_getpid_r>:
 800475c:	f7fc bc82 	b.w	8001064 <_getpid>

08004760 <__sread>:
 8004760:	b510      	push	{r4, lr}
 8004762:	460c      	mov	r4, r1
 8004764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004768:	f000 f894 	bl	8004894 <_read_r>
 800476c:	2800      	cmp	r0, #0
 800476e:	bfab      	itete	ge
 8004770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004772:	89a3      	ldrhlt	r3, [r4, #12]
 8004774:	181b      	addge	r3, r3, r0
 8004776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800477a:	bfac      	ite	ge
 800477c:	6563      	strge	r3, [r4, #84]	; 0x54
 800477e:	81a3      	strhlt	r3, [r4, #12]
 8004780:	bd10      	pop	{r4, pc}

08004782 <__swrite>:
 8004782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004786:	461f      	mov	r7, r3
 8004788:	898b      	ldrh	r3, [r1, #12]
 800478a:	05db      	lsls	r3, r3, #23
 800478c:	4605      	mov	r5, r0
 800478e:	460c      	mov	r4, r1
 8004790:	4616      	mov	r6, r2
 8004792:	d505      	bpl.n	80047a0 <__swrite+0x1e>
 8004794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004798:	2302      	movs	r3, #2
 800479a:	2200      	movs	r2, #0
 800479c:	f000 f868 	bl	8004870 <_lseek_r>
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047aa:	81a3      	strh	r3, [r4, #12]
 80047ac:	4632      	mov	r2, r6
 80047ae:	463b      	mov	r3, r7
 80047b0:	4628      	mov	r0, r5
 80047b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047b6:	f000 b817 	b.w	80047e8 <_write_r>

080047ba <__sseek>:
 80047ba:	b510      	push	{r4, lr}
 80047bc:	460c      	mov	r4, r1
 80047be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c2:	f000 f855 	bl	8004870 <_lseek_r>
 80047c6:	1c43      	adds	r3, r0, #1
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	bf15      	itete	ne
 80047cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80047ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047d6:	81a3      	strheq	r3, [r4, #12]
 80047d8:	bf18      	it	ne
 80047da:	81a3      	strhne	r3, [r4, #12]
 80047dc:	bd10      	pop	{r4, pc}

080047de <__sclose>:
 80047de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e2:	f000 b813 	b.w	800480c <_close_r>
	...

080047e8 <_write_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4d07      	ldr	r5, [pc, #28]	; (8004808 <_write_r+0x20>)
 80047ec:	4604      	mov	r4, r0
 80047ee:	4608      	mov	r0, r1
 80047f0:	4611      	mov	r1, r2
 80047f2:	2200      	movs	r2, #0
 80047f4:	602a      	str	r2, [r5, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f7fc fc73 	bl	80010e2 <_write>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d102      	bne.n	8004806 <_write_r+0x1e>
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	b103      	cbz	r3, 8004806 <_write_r+0x1e>
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	2000012c 	.word	0x2000012c

0800480c <_close_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4d06      	ldr	r5, [pc, #24]	; (8004828 <_close_r+0x1c>)
 8004810:	2300      	movs	r3, #0
 8004812:	4604      	mov	r4, r0
 8004814:	4608      	mov	r0, r1
 8004816:	602b      	str	r3, [r5, #0]
 8004818:	f7fc fc7f 	bl	800111a <_close>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_close_r+0x1a>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_close_r+0x1a>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	2000012c 	.word	0x2000012c

0800482c <_fstat_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4d07      	ldr	r5, [pc, #28]	; (800484c <_fstat_r+0x20>)
 8004830:	2300      	movs	r3, #0
 8004832:	4604      	mov	r4, r0
 8004834:	4608      	mov	r0, r1
 8004836:	4611      	mov	r1, r2
 8004838:	602b      	str	r3, [r5, #0]
 800483a:	f7fc fc7a 	bl	8001132 <_fstat>
 800483e:	1c43      	adds	r3, r0, #1
 8004840:	d102      	bne.n	8004848 <_fstat_r+0x1c>
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	b103      	cbz	r3, 8004848 <_fstat_r+0x1c>
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	bd38      	pop	{r3, r4, r5, pc}
 800484a:	bf00      	nop
 800484c:	2000012c 	.word	0x2000012c

08004850 <_isatty_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4d06      	ldr	r5, [pc, #24]	; (800486c <_isatty_r+0x1c>)
 8004854:	2300      	movs	r3, #0
 8004856:	4604      	mov	r4, r0
 8004858:	4608      	mov	r0, r1
 800485a:	602b      	str	r3, [r5, #0]
 800485c:	f7fc fc79 	bl	8001152 <_isatty>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d102      	bne.n	800486a <_isatty_r+0x1a>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	b103      	cbz	r3, 800486a <_isatty_r+0x1a>
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	2000012c 	.word	0x2000012c

08004870 <_lseek_r>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4d07      	ldr	r5, [pc, #28]	; (8004890 <_lseek_r+0x20>)
 8004874:	4604      	mov	r4, r0
 8004876:	4608      	mov	r0, r1
 8004878:	4611      	mov	r1, r2
 800487a:	2200      	movs	r2, #0
 800487c:	602a      	str	r2, [r5, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	f7fc fc72 	bl	8001168 <_lseek>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <_lseek_r+0x1e>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	b103      	cbz	r3, 800488e <_lseek_r+0x1e>
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	2000012c 	.word	0x2000012c

08004894 <_read_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4d07      	ldr	r5, [pc, #28]	; (80048b4 <_read_r+0x20>)
 8004898:	4604      	mov	r4, r0
 800489a:	4608      	mov	r0, r1
 800489c:	4611      	mov	r1, r2
 800489e:	2200      	movs	r2, #0
 80048a0:	602a      	str	r2, [r5, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f7fc fc00 	bl	80010a8 <_read>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d102      	bne.n	80048b2 <_read_r+0x1e>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	b103      	cbz	r3, 80048b2 <_read_r+0x1e>
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	2000012c 	.word	0x2000012c

080048b8 <_init>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	bf00      	nop
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr

080048c4 <_fini>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	bf00      	nop
 80048c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ca:	bc08      	pop	{r3}
 80048cc:	469e      	mov	lr, r3
 80048ce:	4770      	bx	lr
